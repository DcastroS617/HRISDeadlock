// Generated by Selenium IDE
using DOLE.HRIS.Application.Automation.Selenium;
using DOLE.HRIS.NUnit.Test;
using DOLE.HRIS.NUnit.Test.Utilities;
using NUnit.Framework;
using NUnit.Framework.Interfaces;
using OpenQA.Selenium;
using OpenQA.Selenium.Edge;
using OpenQA.Selenium.Support.UI;
using SeleniumExtras.WaitHelpers;
using System;
using System.Collections.Generic;
using System.Configuration;
using System.Threading;
using System.Threading.Tasks;

namespace CiclosEntrenamientoEdicion
{
    [TestFixture]
    [Category("Ciclo")]
    public class TC003EdicionCaracteresEspecialesCiclosEntrenamientoTest
    {
        private readonly string urlEntorno = Environment.GetEnvironmentVariable("UrlApplicationForTesting", EnvironmentVariableTarget.Process);
        private string urlTest = "";
        private readonly SeleniumEntity seleniumEntitiesEdited = new SeleniumEntity("CCCH001", @"CCCHscripttest@__:script:LPPñ09987:ÑP@__:s@?%#$%^*()%#$%^*++{}*{[*?>><<!#$%^&*((");

        private readonly List<SeleniumEntity> seleniumEntities = new List<SeleniumEntity>();
        private readonly string urlScreen = "/Training/Maintenances/CycleTraining.aspx";


        private IWebDriver driver;
        WebDriverWait wait;
        public IDictionary<string, object> vars { get; private set; }
        private IJavaScriptExecutor js;
        Commons myCommons;

        [SetUp]
        public void SetUp()
        {
            urlTest = !string.IsNullOrEmpty(urlEntorno) ? urlEntorno : ConfigurationManager.AppSettings.Get("UrlApplicationForTesting");
            driver = new EdgeDriver();
            driver.Manage().Window.Maximize();
            myCommons = new Commons();
            myCommons.log();
            wait = new WebDriverWait(driver, TimeSpan.FromSeconds(80));

            seleniumEntities.Add(new SeleniumEntity("CCCH001", "CCCH001_EditarCaracteres"));

            // Inicializa el ejecutor de JavaScript y el diccionario de variables
            js = (IJavaScriptExecutor)driver;
            vars = new Dictionary<string, object>();
        }

        [TearDown]
        protected void TearDown()
        {
            if (TestContext.CurrentContext.Result.Outcome.Status == TestStatus.Failed)
            {
                myCommons.TakeScreenshot(driver, TestContext.CurrentContext.Test.Name);
            }

            driver.Quit();
        }

        [Test]
        public async Task TC003EdicionCaracteresEspecialesCiclosEntrenamiento()
        {
            await myCommons.SeleniumSetup(wait, driver, urlTest, urlScreen);

            Thread.Sleep(1000);
            wait.Until(ExpectedConditions.ElementIsVisible(By.Id("ctl00_cntBody_btnAdd")));

            wait.Until(ExpectedConditions.ElementToBeClickable(By.Id("ctl00_cntBody_btnAdd"))).Click();
            myCommons.Log.Information($"{DateTime.Now}: Ingresando a la modal de Creación del Ciclo de Entrenamiento.");

            Thread.Sleep(1500);
            myCommons.TrainingCycleCreate(wait, driver, js, seleniumEntities);
            myCommons.Log.Information($"{DateTime.Now}: Ciclo de Entrenamiento creado Exitosamente.");

            myCommons.SearchTrainingCycleByCode(wait, driver, js, seleniumEntities[0].Code);
            myCommons.Log.Information($"{DateTime.Now}: Buscar el registro recién creado" + seleniumEntities[0].Code + seleniumEntities[0].Description);
            Thread.Sleep(1000);
            wait.Until(ExpectedConditions.ElementIsVisible(By.Id("dvCycleTrainingCode")));
            wait.Until(ExpectedConditions.ElementToBeClickable(By.Id("dvCycleTrainingCode"))).Click();
            myCommons.Log.Information($"{DateTime.Now}: Seleccionar el registro en el grid " + seleniumEntities[0].Code);

            Thread.Sleep(2000);
            var ButtonElement = driver.FindElement(By.Id("ctl00_cntBody_btnEdit"));
            IWebElement fieldElement = wait.Until(ExpectedConditions.ElementIsVisible(By.Id("ctl00_cntBody_btnEdit")));
            wait.Until(ExpectedConditions.ElementToBeClickable((ButtonElement))).Click();
            myCommons.Log.Information($"{DateTime.Now}: Ingresando en la modal de Edición");
            Thread.Sleep(1500);



            myCommons.EditTrainingCycle(wait, driver, js, new List<SeleniumEntity> { seleniumEntitiesEdited });
            myCommons.Log.Information($"{DateTime.Now}: Se edito el rgistro con los valores " + seleniumEntitiesEdited.Code + seleniumEntitiesEdited.Description);

            Thread.Sleep(500);
            wait.Until(ExpectedConditions.ElementIsVisible(By.Id("ctl00_cntBody_CycleTrainingCodeFilter")));
            Utilities.CleanFields(js, "ctl00_cntBody_CycleTrainingCodeFilter");
            wait.Until(ExpectedConditions.ElementToBeClickable(By.Id("ctl00_cntBody_CycleTrainingCodeFilter"))).Click();
            driver.FindElement(By.Id("ctl00_cntBody_CycleTrainingCodeFilter")).SendKeys(seleniumEntities[0].Code);

            wait.Until(ExpectedConditions.ElementIsVisible(By.Id("ctl00_cntBody_btnSearch")));
            wait.Until(ExpectedConditions.ElementToBeClickable(By.Id("ctl00_cntBody_btnSearch"))).Click();
            myCommons.Log.Information($"{DateTime.Now}: Buscar el Código" + seleniumEntities[0].Code);


            Thread.Sleep(500);
            wait.Until(ExpectedConditions.ElementIsVisible(By.Id("dvCycleTrainingCode")));
            string displayedCode = driver.FindElement(By.Id("dvCycleTrainingCode")).Text;
            Assert.AreEqual("CCCH001", displayedCode, "El código del Ciclo de Entrenamiento no coincide.");
            myCommons.Log.Information($"{DateTime.Now}: Validando el Assert en el campo de Código  " + displayedCode);


            string displayedDescription = driver.FindElement(By.Id("dvCycleTrainingName")).Text;
            Assert.AreEqual("CCCHscripttest@__:script:LPPñ09987:ÑP@__:s@", displayedDescription, "La descripción del Ciclo no coincide.");
            myCommons.Log.Information($"{DateTime.Now}: Validando el Assert en el campo de Descripción  " + displayedDescription);
        }
    }
}