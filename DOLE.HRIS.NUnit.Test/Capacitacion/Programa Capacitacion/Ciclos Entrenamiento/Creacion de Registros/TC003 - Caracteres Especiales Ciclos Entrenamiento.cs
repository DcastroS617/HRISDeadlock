// Generated by Selenium IDE
using DOLE.HRIS.NUnit.Test;
using DOLE.HRIS.NUnit.Test.Utilities;
using NUnit.Framework;
using NUnit.Framework.Interfaces;
using OpenQA.Selenium;
using OpenQA.Selenium.Edge;
using OpenQA.Selenium.Interactions;
using OpenQA.Selenium.Support.UI;
using SeleniumExtras.WaitHelpers;
using Serilog;
using Serilog.Core;
using System;
using System.Collections.Generic;
using System.Configuration;
using System.Drawing;
using System.Net;
using System.Net.Http;
using System.Threading;
using System.Threading.Tasks;

namespace DOLE.HRIS.Application.Automation.Selenium
{
    [TestFixture]
    [Category("Ciclo")]
    public class TC003CreacionCaracteresEspecialesCiclosEntrenamientoTest
    {
        private readonly string urlEntorno = Environment.GetEnvironmentVariable("UrlApplicationForTesting", EnvironmentVariableTarget.Process);
        private string urlTest = "";
        private readonly string urlScreen = "/Training/Maintenances/CycleTraining.aspx";
        private readonly List<SeleniumEntity> seleniumEntities = new List<SeleniumEntity>();


        private IWebDriver driver;
        WebDriverWait wait;
        public IDictionary<string, object> vars { get; private set; }
        private IJavaScriptExecutor js;
        //Actions actions;
        Commons myCommons;

        [SetUp]
        public void SetUp()
        {
            urlTest = !string.IsNullOrEmpty(urlEntorno) ? urlEntorno : ConfigurationManager.AppSettings.Get("UrlApplicationForTesting");
            driver = new EdgeDriver();
            myCommons = new Commons();
            myCommons.log();

            wait = new WebDriverWait(driver, TimeSpan.FromSeconds(60));


            driver.Manage().Window.Maximize();
            // Inicializa el ejecutor de JavaScript y el diccionario de variables

            js = (IJavaScriptExecutor)driver;
            vars = new Dictionary<string, object>();
            seleniumEntities.Add(new SeleniumEntity(@"CYCscript/>test!@#$%^*()__++{}:<>?<script />;:,.[L¨P¨P*ñ{09'987:Ñ[*?P>.><<!@#$%^&*((", @"CYCscript/>test!@#$%^*()__++{}:<>?<script />;:,.[L¨P¨P*ñ{09'987:Ñ[*?P>.><<!@#$%^&*(("));
        }

        [TearDown]
        protected void TearDown()
        {
            if (TestContext.CurrentContext.Result.Outcome.Status == TestStatus.Failed)
            {
                myCommons.TakeScreenshot(driver, TestContext.CurrentContext.Test.Name);
            }

            driver.Quit();
        }

        [Test]
        public async Task TC003CreacionCaracteresEspecialesCiclosEntrenamiento()
        {
            await myCommons.SeleniumSetup(wait, driver, urlTest, urlScreen);

            // Espera a que el botón con ID que contiene 'btnAdd' sea clickeable y haz clic en él
            wait.Until(ExpectedConditions.ElementIsVisible(By.Id("ctl00_cntBody_btnAdd")));
            wait.Until(ExpectedConditions.ElementToBeClickable(By.Id("ctl00_cntBody_btnAdd"))).Click();
            Thread.Sleep(1500);
            myCommons.Log.Information($"{DateTime.Now}: Ingresando a la modal de Creación de Ciclos.");


            myCommons.TrainingCycleCreate(wait, driver, js, seleniumEntities);
            myCommons.Log.Information($"{DateTime.Now}: Digitando los datos para la creación del registro.");



            Thread.Sleep(500);
            wait.Until(ExpectedConditions.ElementIsVisible(By.Id("ctl00_cntBody_CycleTrainingCodeFilter")));
            wait.Until(ExpectedConditions.ElementToBeClickable(By.Id("ctl00_cntBody_CycleTrainingCodeFilter"))).Click();

            Utilities.CleanFields(js, "ctl00_cntBody_CycleTrainingCodeFilter");
            wait.Until(ExpectedConditions.ElementToBeClickable(By.Id("ctl00_cntBody_CycleTrainingCodeFilter"))).Click();
            driver.FindElement(By.Id("ctl00_cntBody_CycleTrainingCodeFilter")).SendKeys("CYCscriptt");

            var searchBtn = driver.FindElement(By.Id("ctl00_cntBody_btnSearch"));

            // Clic
            searchBtn.Click();
            Serilog.Log.Information($"{DateTime.Now}: Click en Buscar");

            // Esperar que el botón vuelva a habilitarse
            wait.Until(drv => drv.FindElement(By.Id("ctl00_cntBody_btnSearch")).Enabled);



            Thread.Sleep(1000);

            myCommons.Log.Information($"{DateTime.Now}: Buscar el Código" + seleniumEntities[0].Code);


            Thread.Sleep(500);
            wait.Until(ExpectedConditions.ElementIsVisible(By.Id("dvCycleTrainingCode")));
            string displayedCode = driver.FindElement(By.Id("dvCycleTrainingCode")).Text;
            Assert.AreEqual("CYCscriptt", displayedCode, "el código del Ciclo de Entrenamiento no coincide.");
            myCommons.Log.Information($"{DateTime.Now}: Validando el Assert en el campo de Código  " + displayedCode);


            string displayedDescription = driver.FindElement(By.Id("dvCycleTrainingName")).Text;
            Assert.AreEqual("CYCscripttest@__:script :.LPPñ09987:ÑP.@", displayedDescription, "El nombre del Ciclo no coincide.");
            myCommons.Log.Information($"{DateTime.Now}: Validando el Assert en el campo de Nombre del Ciclo del Entrenamiento  " + displayedDescription);
        }
    }
}