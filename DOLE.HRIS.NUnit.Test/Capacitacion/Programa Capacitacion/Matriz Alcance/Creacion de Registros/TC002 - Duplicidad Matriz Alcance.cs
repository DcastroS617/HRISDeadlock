// Generated by Selenium IDE
using DOLE.HRIS.Application.Automation.Selenium;
using DOLE.HRIS.NUnit.Test;
using NUnit.Framework;
using NUnit.Framework.Interfaces;
using OpenQA.Selenium;
using OpenQA.Selenium.Edge;
using OpenQA.Selenium.Interactions;
using OpenQA.Selenium.Support.UI;
using SeleniumExtras.WaitHelpers;
using System;
using System.Collections.Generic;
using System.Configuration;
using System.Threading;
using System.Threading.Tasks;

namespace DOLE.HRIS.Application.Automation.Selenium
{
    [TestFixture]
    [Category("Matriz")]
    public class TC002DuplicidadMatrizAlcanceTest
    {
        private readonly string urlEntorno = Environment.GetEnvironmentVariable("UrlApplicationForTesting", EnvironmentVariableTarget.Process);
        private string urlTest = "";
        private readonly string urlScreen = "/Training/Maintenances/MatrixTarget.aspx";
        private readonly List<SeleniumEntity> seleniumEntities = new List<SeleniumEntity>();
        string expectedErrorMessage = "Los datos ingresados provocan un conflicto con otro registro por duplicidad de Código.\nLos datos del registro existente son los siguientes:";


        private IWebDriver driver;
        public IDictionary<string, object> vars { get; private set; }
        public object ScreenshotImageFormat { get; private set; }

        private IJavaScriptExecutor js;
        WebDriverWait wait;
        Commons myCommons;

        [SetUp]
        public void SetUp()
        {
            urlTest = !string.IsNullOrEmpty(urlEntorno) ? urlEntorno : ConfigurationManager.AppSettings.Get("UrlApplicationForTesting");
            driver = new EdgeDriver();
            myCommons = new Commons();
            myCommons.log();

            wait = new WebDriverWait(driver, TimeSpan.FromSeconds(90));


            driver.Manage().Window.Maximize();
            // Inicializa el ejecutor de JavaScript y el diccionario de variables

            js = (IJavaScriptExecutor)driver;
            vars = new Dictionary<string, object>();

            // Agrega entidades de Selenium
            seleniumEntities.Add(new SeleniumEntity("MAD001", "MAD001_DuplicarRegistro"));
            seleniumEntities.Add(new SeleniumEntity("MAD002", "MAD002_DuplicarRegistro"));
        }

        [TearDown]
        public void TearDown()
        {
            if (TestContext.CurrentContext.Result.Outcome.Status == TestStatus.Failed)
            {
                myCommons.TakeScreenshot(driver, TestContext.CurrentContext.Test.Name);
            }

            driver.Quit();
            driver.Dispose();
        }

        [Test]
        //public async Task TC002DuplicidadMatrizAlcance()
        public async Task TC002DuplicidadMatrizAlcance()
        {
            await myCommons.SeleniumSetup(wait, driver, urlTest, urlScreen);
            //myCommons.SeleniumSetup(wait, driver, urlTest, urlScreen).GetAwaiter().GetResult();

            //for (int i = 0; i < 2; i++)
            //{

                wait.Until(ExpectedConditions.ElementIsVisible(By.Id("ctl00_cntBody_btnAdd")));
                wait.Until(ExpectedConditions.ElementToBeClickable(By.Id("ctl00_cntBody_btnAdd"))).Click();
                myCommons.Log.Information($"{DateTime.Now}: Ingresando a la modal de Creación de Matriz.");

                // myCommons.ThematicAreaCreateCharacters(wait, driver, js,seleniumEntities);
                myCommons.MatrixTargetCreate(wait, driver, js, seleniumEntities);
                

                myCommons.Log.Information($"{DateTime.Now}: Digitando los datos para la creación del registro.");
                myCommons.Log.Information($"{DateTime.Now}:Creando el registro:  {seleniumEntities[0].Code} + {seleniumEntities[0].Description}");


                Thread.Sleep(1000);
                wait.Until(ExpectedConditions.ElementIsVisible(By.Id("ctl00_cntBody_btnAdd")));
                wait.Until(ExpectedConditions.ElementToBeClickable(By.Id("ctl00_cntBody_btnAdd"))).Click();
                myCommons.Log.Information($"{DateTime.Now}: Click en el botón de Agregar nuevamente un registro");

                myCommons.MatrixTargetDuplicate(wait, driver, js, seleniumEntities);
                myCommons.Log.Information($"{DateTime.Now}:Intento crear un segundo el registro con los datos:  {seleniumEntities[0].Code} + {seleniumEntities[0].Description}");

                // wait.Until(ExpectedConditions.ElementIsVisible(By.CssSelector("div.modal-header h3.modal-title.text-primary")));

                wait.Until(ExpectedConditions.ElementIsVisible(By.Id("btnDuplicatedClose")));

                // 2. Esperar a que el input esté presente y visible
                var codigoInput = wait.Until(driver =>
                {
                    try
                    {
                        var duplicatedCodeInput = wait.Until(ExpectedConditions.ElementIsVisible(By.Id("ctl00_cntBody_txtDuplicatedMatrixtargetCode")));
                        string actualValue = duplicatedCodeInput.GetAttribute("value");

                        var input = driver.FindElement(By.Id("ctl00_cntBody_txtDuplicatedMatrixtargetCode"));

                        // Realizar el assert
                        Assert.AreEqual(seleniumEntities[0].Code, actualValue, "El código duplicado no coincide con el esperado.");
                        return input.Displayed ? input : null;
                    }
                    catch (NoSuchElementException)
                    {
                        return null;
                    }
                });

                var codigoInput2 = wait.Until(driver =>
                {
                    try
                    {
                        var duplicatedCodeInput = wait.Until(ExpectedConditions.ElementIsVisible(By.Id("ctl00_cntBody_txtDuplicatedMatrixtargetName")));

                        string actualValue = duplicatedCodeInput.GetAttribute("value");

                        var input = driver.FindElement(By.Id("ctl00_cntBody_txtDuplicatedMatrixtargetName"));

                        // Realizar el assert
                        Assert.AreEqual(seleniumEntities[0].Description, actualValue, "El nombre duplicado no coincide con el esperado.");
                        return input.Displayed ? input : null;
                    }
                    catch (NoSuchElementException)
                    {
                        return null;
                    }
                });
                Thread.Sleep(500);
                wait.Until(ExpectedConditions.ElementIsVisible(By.Id("btnDuplicatedAccept")));
                wait.Until(ExpectedConditions.ElementToBeClickable(By.Id("btnDuplicatedAccept"))).Click();
                Serilog.Log.Information($"{DateTime.Now}: Click en Acpeptar en la modal de Registro duplicado");



                wait.Until(ExpectedConditions.ElementIsVisible(By.Id("btnCancel")));
                driver.FindElement(By.Id("btnCancel")).Click();
                myCommons.Log.Information($"{DateTime.Now}: Cerrando modal de Registro Duplicado");
           //}
        }
    }
}