// Generated by Selenium IDE
using DOLE.HRIS.Application.Automation.Selenium;
using DOLE.HRIS.NUnit.Test;
using NUnit.Framework;
using NUnit.Framework.Interfaces;
using OpenQA.Selenium;
using OpenQA.Selenium.Edge;
using OpenQA.Selenium.Interactions;
using OpenQA.Selenium.Support.UI;
using SeleniumExtras.WaitHelpers;
using System;
using System.Collections.Generic;
using System.Configuration;
using System.Threading;
using System.Threading.Tasks;

namespace ProgramasPlanesEntrenamientoNuevo
{
    [TestFixture]
    [Category("Programas")]
    public class TC003EspaciosBlancosProgramasPlanesEntrenamientoCreacionTest
    {
        private readonly string urlEntorno = Environment.GetEnvironmentVariable("UrlApplicationForTesting", EnvironmentVariableTarget.Process);
        private string urlTest = "";
        private readonly string urlScreen = "/Training/Maintenances/TrainingPlanPrograms.aspx";


        private readonly SeleniumEntity seleniumEntities = new SeleniumEntity("", "");

        string expectedErrorMessage = "Por favor verifique los campos marcados en el formulario, corrija los errores e intente nuevamente.";


        private IWebDriver driver;
        WebDriverWait wait;
        public IDictionary<string, object> vars { get; private set; }
        private IJavaScriptExecutor js;
        //Actions actions;
        Commons myCommons;

        [SetUp]
        public void SetUp()
        {
            urlTest = !string.IsNullOrEmpty(urlEntorno) ? urlEntorno : ConfigurationManager.AppSettings.Get("UrlApplicationForTesting");
            driver = new EdgeDriver();
            myCommons = new Commons();
            myCommons.log();

            wait = new WebDriverWait(driver, TimeSpan.FromSeconds(60));


            driver.Manage().Window.Maximize();
            // Inicializa el ejecutor de JavaScript y el diccionario de variables

            js = (IJavaScriptExecutor)driver;
            vars = new Dictionary<string, object>();
        }

        [TearDown]
        protected void TearDown()
        {
            if (TestContext.CurrentContext.Result.Outcome.Status == TestStatus.Failed)
            {
                myCommons.TakeScreenshot(driver, TestContext.CurrentContext.Test.Name);
            }

            driver.Quit();
        }

        [Test]
        public async Task TC003EspaciosBlancosProgramasPlanesEntrenamientoCreacion()
        {
            await myCommons.SeleniumSetup(wait, driver, urlTest, urlScreen);
            wait.Until(ExpectedConditions.ElementIsVisible(By.Id("ctl00_cntBody_btnAdd")));

            wait.Until(ExpectedConditions.ElementToBeClickable(By.Id("ctl00_cntBody_btnAdd"))).Click();
            Thread.Sleep(1500);
            myCommons.Log.Information($"{DateTime.Now}: Ingresando a la modal de Creación de Programas Planes de Entrenamiento.");

            // Esperar la presencia del campo antes de hacer clic
            wait.Until(ExpectedConditions.PresenceOfAllElementsLocatedBy(By.Id("ctl00_cntBody_txtTrainingPlanProgramCode")));
            IWebElement codeField = wait.Until(ExpectedConditions.ElementToBeClickable(By.Id("ctl00_cntBody_txtTrainingPlanProgramCode")));
            codeField.Click();
            codeField.SendKeys(seleniumEntities.Code);

            wait.Until(ExpectedConditions.PresenceOfAllElementsLocatedBy(By.Id("ctl00_cntBody_txtTrainingPlanProgramName")));
            IWebElement nameField = wait.Until(ExpectedConditions.ElementToBeClickable(By.Id("ctl00_cntBody_txtTrainingPlanProgramName")));
            nameField.Click();
            nameField.SendKeys(seleniumEntities.Description);


            //----- Esperar a que el botón toggle esté presente y visible para Habilitar el registro----
            // Esperar que el toggle esté presente
            // Esperar a que el toggle esté presente
            var toggleInput = wait.Until(ExpectedConditions.ElementExists(By.Id("ctl00_cntBody_chkSearchEnabled")));
            if (!toggleInput.Selected)
            {
                var toggleVisual = wait.Until(ExpectedConditions.ElementToBeClickable(By.CssSelector("div.toggle")));

                // Forzar clic vía JavaScript
                ((IJavaScriptExecutor)driver).ExecuteScript("arguments[0].click();", toggleVisual);

                // Re-obtener después del clic
                toggleInput = wait.Until(ExpectedConditions.ElementExists(By.Id("ctl00_cntBody_chkSearchEnabled")));
            }
            Assert.IsTrue(toggleInput.Selected, "El toggle no está en 'Sí' como se esperaba.");



            wait.Until(ExpectedConditions.ElementToBeClickable(By.Id("ctl00_cntBody_btnAccept"))).Click();
            Serilog.Log.Information($"{DateTime.Now}: Click en Acpeptar para Guardar el Registro del Ciclo");

            Thread.Sleep(1500);
            wait.Until(ExpectedConditions.ElementIsVisible(By.CssSelector("h3[class='panel-title text-center']")));

            string errorMessage = driver.FindElement(By.CssSelector("div[class='panel-body text-center']")).Text;

            Assert.AreEqual(expectedErrorMessage, errorMessage, "Error Message Incorrecto.");
            myCommons.Log.Information($"{DateTime.Now}:Validando el Assert con el mensaje:  " + errorMessage);

        }
    }

}