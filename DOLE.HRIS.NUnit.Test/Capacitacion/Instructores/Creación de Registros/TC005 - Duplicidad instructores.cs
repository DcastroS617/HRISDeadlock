// Generated by Selenium IDE
using DOLE.HRIS.NUnit.Test;
using DOLE.HRIS.NUnit.Test.Utilities;
using NUnit.Framework;
using NUnit.Framework.Interfaces;
using OpenQA.Selenium;
using OpenQA.Selenium.Edge;
using OpenQA.Selenium.Interactions;
using OpenQA.Selenium.Support.UI;
using SeleniumExtras.WaitHelpers;
using Serilog;
using Serilog.Core;
using System;
using System.Collections.Generic;
using System.Configuration;
using System.Drawing;
using System.Net;
using System.Net.Http;
using System.Threading;
using System.Threading.Tasks;

namespace DOLE.HRIS.Application.Automation.Selenium
{
    [TestFixture]
    [Category("Instructor")]
    public class TC002DuplicidadInstructoresTest
    {
        private readonly string urlEntorno = Environment.GetEnvironmentVariable("UrlApplicationForTesting", EnvironmentVariableTarget.Process);
        private string urlTest = "";
        private readonly string urlScreen = "/Training/Maintenances/Trainers.aspx";
        private readonly List<SeleniumEntity> seleniumEntities = new List<SeleniumEntity>();
        string expectedErrorMessage = "Los datos ingresados provocan un conflicto con otro registro por duplicidad de código.\nLos datos del registro existente son los siguientes:";


        private IWebDriver driver;
        public IDictionary<string, object> vars { get; private set; }
        private IJavaScriptExecutor js;
        WebDriverWait wait;
        Commons myCommons;

        [SetUp]
        public void SetUp()
        {
            urlTest = !string.IsNullOrEmpty(urlEntorno) ? urlEntorno : ConfigurationManager.AppSettings.Get("UrlApplicationForTesting");
            driver = new EdgeDriver();
            myCommons = new Commons();
            myCommons.log();

            wait = new WebDriverWait(driver, TimeSpan.FromSeconds(90));


            driver.Manage().Window.Maximize();
            // Inicializa el ejecutor de JavaScript y el diccionario de variables

            js = (IJavaScriptExecutor)driver;
            vars = new Dictionary<string, object>();

            // Agrega entidades de Selenium
            seleniumEntities.Add(new SeleniumEntity("PED001", "Instructor a Duplicar"));
                                                    
        }

        [TearDown]
        protected void TearDown()
        {
            if (TestContext.CurrentContext.Result.Outcome.Status == TestStatus.Failed)
            {
                myCommons.TakeScreenshot(driver, TestContext.CurrentContext.Test.Name);
            }

            driver.Quit();
        }

        [Test]
        public async Task TC002CreacionDuplicidadInstructores()
        {
            await myCommons.SeleniumSetup(wait, driver, urlTest, urlScreen);


           
                Thread.Sleep(2000);

            // Espera a que el botón con ID que contiene 'btnAdd' sea clickeable y haz clic en él
            wait.Until(ExpectedConditions.ElementIsVisible(By.Id("ctl00_cntBody_btnAdd")));
            wait.Until(ExpectedConditions.ElementToBeClickable(By.Id("ctl00_cntBody_btnAdd"))).Click();
            myCommons.Log.Information($"{DateTime.Now}: Ingresando a la modal de Creación de Instructor.");

            Thread.Sleep(1000);
            myCommons.CreateTrainer(wait, driver, js, seleniumEntities, "Persona externa");
            myCommons.Log.Information($"{DateTime.Now}: Digitando los datos para la creación del registro.");


            Thread.Sleep(1000);
            wait.Until(ExpectedConditions.ElementIsVisible(By.Id("ctl00_cntBody_btnAdd")));
            wait.Until(ExpectedConditions.ElementToBeClickable(By.Id("ctl00_cntBody_btnAdd"))).Click();
            myCommons.Log.Information($"{DateTime.Now}: Esperando que el botón de Aceptar se muestre.");


            myCommons.DuplicateTrainer(wait, driver, js, seleniumEntities, "Persona externa");
                myCommons.Log.Information($"{DateTime.Now}: Digitando los datos para la creación del registro.");


                Thread.Sleep(1000);

                wait.Until(ExpectedConditions.ElementIsVisible(By.Id("ctl00_cntBody_divDuplicatedDialogText")));
                string errorMessage = driver.FindElement(By.Id("ctl00_cntBody_divDuplicatedDialogText")).Text;
                errorMessage = errorMessage.Replace("\r", "");
                Assert.AreEqual(expectedErrorMessage, errorMessage, "El mensaje de error no coincide con el esperado.");
                myCommons.Log.Information($"{DateTime.Now}:Despliegue de modal de Registro duplicado con el mensaje " + expectedErrorMessage);

                try
                {
                    //Encuentra el botón usando un selector CSS que contiene 'btnDuplicatedAccept' en el id
                    wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//button[contains(@id, 'btnDuplicatedAccept')]")));

                    var duplicateButton = driver.FindElement(By.XPath("//button[contains(@id, 'btnDuplicatedAccept')]"));
                    duplicateButton.Click();

                    Thread.Sleep(1000);
                    wait.Until(ExpectedConditions.ElementIsVisible(By.Id("btnCancel")));

                    driver.FindElement(By.Id("btnCancel")).Click();
                    {
                        var element = driver.FindElement(By.TagName("body"));
                        Actions builder = new Actions(driver);
                        builder.MoveToElement(element, 0, 0).Perform();
                        myCommons.Log.Information($"{DateTime.Now}: Cerrando modal de Registro Duplicado");

                    }
                }
                catch (Exception)
                {

                    wait.Until(ExpectedConditions.ElementToBeClickable(By.CssSelector(".btn-default .active"))).Click();
                    wait.Until(ExpectedConditions.ElementToBeClickable(By.Id("ctl00_cntBody_btnActivateDeletedAccept"))).Click();
                    myCommons.Log.Information($"{DateTime.Now}: Cerrando modal de Registro Duplicando");

                }

            
        }
    }
}