// Generated by Selenium IDE
using DOLE.HRIS.NUnit.Test;
using DOLE.HRIS.NUnit.Test.Utilities;
using NUnit.Framework;
using NUnit.Framework.Interfaces;
using OpenQA.Selenium;
using OpenQA.Selenium.DevTools;
using OpenQA.Selenium.Edge;
using OpenQA.Selenium.Interactions;
using OpenQA.Selenium.Support.UI;
using SeleniumExtras.WaitHelpers;
using Serilog;
using Serilog.Core;
using System;
using System.Collections.Generic;
using System.Configuration;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

namespace DOLE.HRIS.Application.Automation.Selenium
{
    [TestFixture]
    [Category("Instructor")]

    public class TC002FiltrosCaracteresEspecialesInstructoresTest
    {
        private readonly string urlEntorno = Environment.GetEnvironmentVariable("UrlApplicationForTesting", EnvironmentVariableTarget.Process);
        private string urlTest = "";
        private readonly string urlScreen = "/Training/Maintenances/Trainers.aspx";



        private readonly SeleniumEntity seleniumEntities = new SeleniumEntity(@"Instruscript/>test!@#$%^*()__++{}:<>?<script/>;:,.[L¨P¨P*ñ{09'987:Ñ[*?P>.><<!@#$%^&*((", @"INSscript/>test!@#$%^*()__++{}:<>?<script/>;:,.[L¨P¨P*ñ{09'987:Ñ[*?P>.><<!@#$%^&*((");


        private IWebDriver driver;
        public IDictionary<string, object> vars { get; private set; }
        private IJavaScriptExecutor js;
        WebDriverWait wait;
        Commons myCommons;

        [SetUp]
        public void SetUp()
        {
            urlTest = !string.IsNullOrEmpty(urlEntorno) ? urlEntorno : ConfigurationManager.AppSettings.Get("UrlApplicationForTesting");
            // Inicializa el driver de Edge
            driver = new EdgeDriver();
            myCommons = new Commons();
            wait = new WebDriverWait(driver, TimeSpan.FromSeconds(60));

            driver.Manage().Window.Maximize();
            // Inicializa el ejecutor de JavaScript y el diccionario de variables
            js = (IJavaScriptExecutor)driver;
            vars = new Dictionary<string, object>();
            myCommons.log();
        }

        [TearDown]
        protected void TearDown()
        {
            if (TestContext.CurrentContext.Result.Outcome.Status == TestStatus.Failed)
            {
                myCommons.TakeScreenshot(driver, TestContext.CurrentContext.Test.Name);
            }

            driver.Quit();
        }

        [Test]
        public async Task TC002FiltrosCaracteresEspecialesInstructores()
        {
            await myCommons.SeleniumSetup(wait, driver, urlTest, urlScreen);

            // Espera a que el botón con ID que contiene 'btnAdd' sea clickeable y haz clic en él
            wait.Until(ExpectedConditions.ElementIsVisible(By.Id("ctl00_cntBody_btnAdd")));

            wait.Until(ExpectedConditions.ElementToBeClickable(By.Id("ctl00_cntBody_btnAdd"))).Click();
            driver.Manage().Timeouts().ImplicitWait = TimeSpan.FromSeconds(20);
            myCommons.Log.Information($"{DateTime.Now}: Ingresando a la modal de Creación de Instructores.");
            myCommons.CreateTrainer(wait, driver, js, new List<SeleniumEntity> { seleniumEntities }, "Persona externa");

            driver.Manage().Timeouts().ImplicitWait = TimeSpan.FromSeconds(50);

            myCommons.TrainerEmployeeByCode(wait, driver, js, seleniumEntities.Code);
            myCommons.Log.Information($"{DateTime.Now}: Buscando por Código."+ seleniumEntities.Code);

            Thread.Sleep(2000);  // Espera para ver si se actualiza


            wait.Until(ExpectedConditions.ElementIsVisible(By.Id("dvTrainerCode")));
            var displayedCode = wait.Until(driver => driver.FindElement(By.Id("dvTrainerCode"))).Text;
            myCommons.Log.Information($"{DateTime.Now}: Esperando que el elemento sea visible dvTrainerCode" + seleniumEntities.Code);

            //string displayedCode = driver.FindElement(By.Id("dvTrainingCenterCode")).Text;
            Assert.AreEqual("Instruscri", displayedCode, "La código del instructor no coincide.");
            myCommons.Log.Information($"{DateTime.Now}: Validando el Assert en el campo de Código  " + displayedCode);


            myCommons.TrainerEmployeeByName(wait, driver, js, seleniumEntities.Description);
            myCommons.Log.Information($"{DateTime.Now}: Buscando por descipción  " + seleniumEntities.Description);
            

            wait.Until(ExpectedConditions.ElementIsVisible(By.Id("dvTrainerName")));
            var displayedDescription = wait.Until(driver => driver.FindElement(By.Id("dvTrainerName"))).Text;

            //string displayedDescription = driver.FindElement(By.Id("dvTrainingCenterDescription")).Text;
            Assert.AreEqual("INSscripttest@__:script:.LPPñ09987:ÑP.@", displayedDescription, "La descripción del Instructor no coincide.");
            myCommons.Log.Information($"{DateTime.Now}: Validando el Assert en el campo de Descripción  " + displayedDescription);


        }

    }
}