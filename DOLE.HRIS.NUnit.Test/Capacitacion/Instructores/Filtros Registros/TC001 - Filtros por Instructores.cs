// Generated by Selenium IDE
using DOLE.HRIS.NUnit.Test;
using DOLE.HRIS.NUnit.Test.Utilities;
using NUnit.Framework;
using NUnit.Framework.Interfaces;
using OpenQA.Selenium;
using OpenQA.Selenium.DevTools;
using OpenQA.Selenium.Edge;
using OpenQA.Selenium.Interactions;
using OpenQA.Selenium.Support.UI;
using SeleniumExtras.WaitHelpers;
using Serilog;
using Serilog.Core;
using System;
using System.Collections.Generic;
using System.Configuration;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

namespace DOLE.HRIS.Application.Automation.Selenium
{
    [TestFixture]
    [Category("Instructor")]
    public class TC001FiltrosInstructoresTest
    {
        private readonly string urlEntorno = Environment.GetEnvironmentVariable("UrlApplicationForTesting", EnvironmentVariableTarget.Process);
        private readonly List<SeleniumEntity> seleniumEntities = new List<SeleniumEntity>();
        private string urlTest = "";
        private readonly string urlScreen = "/Training/Maintenances/Trainers.aspx";


        private IWebDriver driver;
        public IDictionary<string, object> vars { get; private set; }
        private IJavaScriptExecutor js;
        WebDriverWait wait;
        Commons myCommons;

        [SetUp]
        public void SetUp()
        {
            urlTest = !string.IsNullOrEmpty(urlEntorno) ? urlEntorno : ConfigurationManager.AppSettings.Get("UrlApplicationForTesting");
            // Inicializa el driver de Edge
            driver = new EdgeDriver();
            myCommons = new Commons();
            wait = new WebDriverWait(driver, TimeSpan.FromSeconds(70));

            driver.Manage().Window.Maximize();
            // Inicializa el ejecutor de JavaScript y el diccionario de variables
            js = (IJavaScriptExecutor)driver;
            vars = new Dictionary<string, object>();
            myCommons.log();
            seleniumEntities.Add(new SeleniumEntity("567890", "Pedro a Filtrar"));

        }
        [TearDown]
        protected void TearDown()
        {
            if (TestContext.CurrentContext.Result.Outcome.Status == TestStatus.Failed)
            {
                myCommons.TakeScreenshot(driver, TestContext.CurrentContext.Test.Name);
            }

            driver.Quit();
        }

        [Test]
        public async Task TC001FiltrosInstructores()
        {

            await myCommons.SeleniumSetup(wait, driver, urlTest, urlScreen);
            Thread.Sleep(1500);
            wait.Until(ExpectedConditions.ElementIsVisible(By.Id("ctl00_cntBody_btnAdd")));

            wait.Until(ExpectedConditions.ElementToBeClickable(By.Id("ctl00_cntBody_btnAdd"))).Click();
            myCommons.Log.Information($"{DateTime.Now}: Esperando que el botón de Aceptar se muestre.");

            // Realiza acciones con el elemento <body>
            {
                var bodyElement = wait.Until(ExpectedConditions.ElementIsVisible(By.TagName("body")));
                Actions builder = new Actions(driver);
                builder.MoveToElement(bodyElement, 0, 0).Perform();
            }


            myCommons.Log.Information($"{DateTime.Now}: Ingresando a la modal de Creación de Instructor.");
            myCommons.CreateTrainer(wait, driver, js, seleniumEntities, "Persona externa");
                       
            myCommons.SearchTrainerByCodeAndType(wait, driver, js, seleniumEntities[0].Code);
            Thread.Sleep(1500);
            //Espera que el elemento en el grid sea visble

            // Espera para ver si se actualiza

            wait.Until(ExpectedConditions.ElementIsVisible(By.Id("dvTrainerCode")));


            var trainerCodeText = wait.Until(drv =>
            {
                var el = drv.FindElement(By.Id("dvTrainerCode"));
                return el.Displayed ? el.Text : null;
            });

            // 2. Usa la propiedad correcta en lugar de “expected”
            Assert.AreEqual(seleniumEntities[0].Code, trainerCodeText, "El código del instructor no coincide.");

            myCommons.Log.Information($"Código del instructor recuperado después de la búsqueda: {trainerCodeText}");

            // Esperar a que desaparezca y vuelva a aparecer el contenedor de resultados para asegurarse de que está actualizado
            wait.Until(ExpectedConditions.InvisibilityOfElementLocated(By.Id("dvLoadingGrid"))); // si hay loader
            wait.Until(ExpectedConditions.ElementIsVisible(By.Id("dvTrainerName")));

            var trainerDescriptionText = wait.Until(drv =>
            {
                var el = drv.FindElement(By.Id("dvTrainerName"));
                return el.Displayed ? el.Text : null;
            });
            Assert.AreEqual(seleniumEntities[0].Description, trainerDescriptionText, "La descripción no coincide.");
            myCommons.Log.Information($"Nombre del instrcutor recuperado después de la búsqueda: {trainerDescriptionText}");


            var  typeText = wait.Until(drv =>
            {
                var el = drv.FindElement(By.Id("dvTrainerType"));
                return el.Displayed ? el.Text : null;
            });
            Assert.AreEqual("Persona externa", typeText, "El tipo no coincide.");


       
            myCommons.Log.Information($"Lugar del centro recuperada: {typeText}");
            myCommons.TrainerEmployeeByName(wait, driver, js, seleniumEntities[0].Description);

            //Espera que el elemento en el grid sea visble
            Thread.Sleep(1000);

            wait.Until(ExpectedConditions.ElementIsVisible(By.Id("dvTrainerName")));

            wait.Until(d =>
            {
                var element = d.FindElement(By.Id("dvTrainerName"));
                return element.Displayed && element.Text == seleniumEntities[0].Description;
            });




             trainerDescriptionText = wait.Until(drv =>
            {
                var el = drv.FindElement(By.Id("dvTrainerName"));
                return el.Displayed ? el.Text : null;
            });
            Assert.AreEqual(seleniumEntities[0].Description, trainerDescriptionText, "La descripción no coincide.");

    
            myCommons.Log.Information($"Decripción del Instructor recuperado después de la búsqueda: {trainerDescriptionText}");



            // Thread.Sleep(1000);
            wait.Until(ExpectedConditions.ElementIsVisible(By.Id("ctl00_cntBody_txtTrainerCodeFilter")));

            Utilities.CleanFields(js, "ctl00_cntBody_txtTrainerCodeFilter");
            Utilities.CleanFields(js, "ctl00_cntBody_txtTrainerNameFilter");
            driver.FindElement(By.Id("ctl00_cntBody_cboTrainerTypeFilter")).Click();
            {
                var dropdown = driver.FindElement(By.Id("ctl00_cntBody_cboTrainerTypeFilter"));
                dropdown.FindElement(By.XPath("//option[. = 'Persona externa']")).Click();
            }

            wait.Until(ExpectedConditions.ElementToBeClickable(By.Id("ctl00_cntBody_txtTrainerCodeFilter"))).Click();

            driver.FindElement(By.Id("ctl00_cntBody_txtTrainerCodeFilter")).SendKeys(seleniumEntities[0].Code);

            driver.FindElement(By.Id("ctl00_cntBody_btnSearch")).Click();

            wait.Until(ExpectedConditions.ElementIsVisible(By.Id("dvTrainerType")));
            //locationText = wait.Until(drver => driver.FindElement(By.Id("dvPlaceLocation"))).Text; 
            typeText = wait.Until(driver =>
            {
                try
                {
                    var element = driver.FindElement(By.Id("dvTrainerType"));
                    return element.Displayed ? element.Text : null;
                }
                catch (StaleElementReferenceException)
                {
                    // Reintenta una vez si el DOM se reconstruyó
                    var element = driver.FindElement(By.Id("dvTrainerType"));
                    return element.Displayed ? element.Text : null;
                }
            });

            Assert.AreEqual("Persona externa", typeText);
            myCommons.Log.Information($"Tipo del Instructor recuperado: {typeText}");

        }

       
    }
}