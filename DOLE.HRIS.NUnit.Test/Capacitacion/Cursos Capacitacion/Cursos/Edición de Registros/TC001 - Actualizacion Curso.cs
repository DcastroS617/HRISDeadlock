
// Generated by Selenium IDE
using DOLE.HRIS.NUnit.Test;
using DOLE.HRIS.NUnit.Test.Utilities;
using NUnit.Framework;
using NUnit.Framework.Interfaces;
using OpenQA.Selenium;
using OpenQA.Selenium.Edge;
using OpenQA.Selenium.Interactions;
using OpenQA.Selenium.Support.UI;
using SeleniumExtras.WaitHelpers;
using Serilog;
using Serilog.Core;
using System;
using System.Collections.Generic;
using System.Configuration;
using System.Drawing;
using System.Net;
using System.Net.Http;
using System.Threading;
using System.Threading.Tasks;

namespace DOLE.HRIS.Application.Automation.Selenium
{
    [TestFixture]
    [Category("Cursos")]
    public class TC001ActualizacionCursoTest
    {
        private readonly string urlEntorno = Environment.GetEnvironmentVariable("UrlApplicationForTesting", EnvironmentVariableTarget.Process);
        private string urlTest = "";
        private readonly List<SeleniumEntity> seleniumEntities = new List<SeleniumEntity>();
        private readonly List<SeleniumEntity> seleniumEntitiesEdited = new List<SeleniumEntity>();

        private readonly string urlScreen = "/Training/Maintenances/Courses.aspx";
        private IWebDriver driver;
        public IDictionary<string, object> vars { get; private set; }
        private IJavaScriptExecutor js;
        WebDriverWait wait;
        Commons myCommons;

        [SetUp]
        public void SetUp()
        {
            urlTest = !string.IsNullOrEmpty(urlEntorno) ? urlEntorno : ConfigurationManager.AppSettings.Get("UrlApplicationForTesting");

            driver = new EdgeDriver();
            myCommons = new Commons();
            myCommons.log();

            wait = new WebDriverWait(driver, TimeSpan.FromSeconds(80));
            js = (IJavaScriptExecutor)driver;
            driver.Manage().Window.Maximize();

            vars = new Dictionary<string, object>();

            seleniumEntities.Add(new SeleniumEntity("CUUP001", "CUUP001_CursoAEditar001"));


            seleniumEntitiesEdited.Add(new SeleniumEntity("CUUP001", "CUUP001_CursoUpdate001"));
        }

        [TearDown]
        protected void TearDown()
        {
            if (TestContext.CurrentContext.Result.Outcome.Status == TestStatus.Failed)
            {
                myCommons.TakeScreenshot(driver, TestContext.CurrentContext.Test.Name);
            }

            driver.Quit();
        }

        [Test]
        public async Task TC001ActualizacionCurso()
        {
            await myCommons.SeleniumSetup(wait, driver, urlTest, urlScreen);

            // Espera a que el botón con ID que contiene 'btnAdd' sea clickeable y haz clic en él
            wait.Until(ExpectedConditions.ElementIsVisible(By.Id("ctl00_cntBody_btnAdd")));
            wait.Until(ExpectedConditions.ElementToBeClickable(By.Id("ctl00_cntBody_btnAdd"))).Click();
            myCommons.Log.Information($"{DateTime.Now}: Ingresando a la modal de Creación de Escuela.");

            Thread.Sleep(1000);
            myCommons.CourseCreateCharacters(wait, driver, js, seleniumEntities);
            myCommons.Log.Information($"{DateTime.Now}: Se crea el registro con los datos" + seleniumEntities[0].Code + seleniumEntities[0].Description);

            myCommons.CourseByCode(wait, driver, js, seleniumEntities[0].Code);
            myCommons.Log.Information($"{DateTime.Now}: Buscar el registro recién creado" + seleniumEntities[0].Code + seleniumEntities[0].Description);
            Thread.Sleep(1000);
            wait.Until(ExpectedConditions.ElementExists(By.Id("dvCourseCode")));
            wait.Until(ExpectedConditions.ElementIsVisible(By.Id("dvCourseCode")));
            wait.Until(ExpectedConditions.ElementToBeClickable(By.Id("dvCourseCode"))).Click();

            myCommons.Log.Information($"{DateTime.Now}: Seleccionar el regiistro en el grid " + seleniumEntities[0].Code);

            Thread.Sleep(1500);
            var ButtonElement = driver.FindElement(By.Id("ctl00_cntBody_btnEdit"));
            IWebElement fieldElement = wait.Until(ExpectedConditions.ElementIsVisible(By.Id("ctl00_cntBody_btnEdit")));
            wait.Until(ExpectedConditions.ElementToBeClickable((ButtonElement))).Click();
            myCommons.Log.Information($"{DateTime.Now}: Ingresando en la modal de Edición");
            Thread.Sleep(500);

            myCommons.EditCourse(wait, driver, js, seleniumEntitiesEdited);
            myCommons.Log.Information($"{DateTime.Now}: Se edito el rgistro con los valores " + seleniumEntitiesEdited[0].Code + seleniumEntitiesEdited[0].Description);


            Utilities.CleanFields(js, "ctl00_cntBody_txtCourseCodeFilter");
            myCommons.Log.Information($"{DateTime.Now}: Limpiar filtro de código");


            myCommons.CourseByCode(wait, driver, js, seleniumEntities[0].Code);
            Thread.Sleep(1000);
            wait.Until(ExpectedConditions.ElementIsVisible(By.Id("dvCourseCode")));
            myCommons.Log.Information($"{DateTime.Now}: Buscando el Curso creado  " + seleniumEntities[0].Code);

            // Los asserts validan que el test case, realmente inserto las aulas
            string displayedCode = driver.FindElement(By.Id("dvCourseCode")).Text;
            Assert.AreEqual(seleniumEntities[0].Code, displayedCode, "El código del Curso no coincide.");
            myCommons.Log.Information($"{DateTime.Now}: Validando el Assert por Código del Curso  " + seleniumEntities[0].Code);


            string displayedDescription = driver.FindElement(By.Id("dvCourseName")).Text;
            Assert.AreEqual(seleniumEntitiesEdited[0].Description, displayedDescription, "Nombre del curso no coincide.");
            myCommons.Log.Information($"{DateTime.Now}: Validando el Assert por Nombre del Curso  " + seleniumEntitiesEdited[0].Description);

            string displayedTypeTrainingName = driver.FindElement(By.Id("dvTypeTrainingName")).Text;
            Assert.AreEqual("Congreso: Sesión donde diversos expertos abordan variados temas. Permite uso de varias modalidades de entrega", displayedTypeTrainingName, "Tipo de Formación no coincide.");
            myCommons.Log.Information($"{DateTime.Now}: Validando el Assert por Tipo de Formación " + displayedTypeTrainingName);


            string displayedCourseCostByParticipant = driver.FindElement(By.Id("dvCourseCostByParticipant")).Text;
            Assert.AreEqual("$ 80,00", displayedCourseCostByParticipant, "Costo por Participante no coincide.");
            myCommons.Log.Information($"{DateTime.Now}: Validando el Assert paraCosto por Participante  " + displayedCourseCostByParticipant);

            string displayeddvCourseDuration = driver.FindElement(By.Id("dvCourseDuration")).Text;
            Assert.AreEqual("90,00 hrs", displayeddvCourseDuration, "Duración del Curso no coincide.");
            myCommons.Log.Information($"{DateTime.Now}: Validando el Assert para Duración del Curso  " + displayeddvCourseDuration);
        }
        
    }
}