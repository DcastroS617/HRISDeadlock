// Generated by Selenium IDE
using DOLE.HRIS.NUnit.Test;
using DOLE.HRIS.NUnit.Test.Utilities;
using NUnit.Framework;
using NUnit.Framework.Interfaces;
using OpenQA.Selenium;
using OpenQA.Selenium.DevTools;
using OpenQA.Selenium.Edge;
using OpenQA.Selenium.Interactions;
using OpenQA.Selenium.Support.UI;
using SeleniumExtras.WaitHelpers;
using Serilog;
using Serilog.Core;
using System;
using System.Collections.Generic;
using System.Configuration;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

namespace DOLE.HRIS.Application.Automation.Selenium
{
    [TestFixture]
    [Category("Cursos")]
    public class TC001FiltrosCursoTest
    {
        private readonly string urlEntorno = Environment.GetEnvironmentVariable("UrlApplicationForTesting", EnvironmentVariableTarget.Process);
        private readonly SeleniumEntity seleniumEntities = new SeleniumEntity("CUF001", "CUF001_EscuelaAFiltrar");
        private string urlTest = "";
        private readonly string urlScreen = "/Training/Maintenances/Courses.aspx";


        private IWebDriver driver;
        public IDictionary<string, object> vars { get; private set; }
        private IJavaScriptExecutor js;
        WebDriverWait wait;
        Commons myCommons;

        [SetUp]
        public void SetUp()
        {
            urlTest = !string.IsNullOrEmpty(urlEntorno) ? urlEntorno : ConfigurationManager.AppSettings.Get("UrlApplicationForTesting");
            // Inicializa el driver de Edge
            driver = new EdgeDriver();
            myCommons = new Commons();
            wait = new WebDriverWait(driver, TimeSpan.FromSeconds(60));

            driver.Manage().Window.Maximize();
            // Inicializa el ejecutor de JavaScript y el diccionario de variables
            js = (IJavaScriptExecutor)driver;
            vars = new Dictionary<string, object>();
            myCommons.log();
        }

        [TearDown]
        protected void TearDown()
        {
            if (TestContext.CurrentContext.Result.Outcome.Status == TestStatus.Failed)
            {
                myCommons.TakeScreenshot(driver, TestContext.CurrentContext.Test.Name);
            }

            driver.Quit();
        }

        [Test]
        public async Task TC001FiltrosCurso()
        {
            await myCommons.SeleniumSetup(wait, driver, urlTest, urlScreen);
            Thread.Sleep(1000);
            wait.Until(ExpectedConditions.ElementIsVisible(By.Id("ctl00_cntBody_btnAdd")));

            wait.Until(ExpectedConditions.ElementToBeClickable(By.Id("ctl00_cntBody_btnAdd"))).Click();
            myCommons.Log.Information($"{DateTime.Now}: Esperando que el botón de Aceptar se muestre.");

            // Realiza acciones con el elemento <body>
            {
                var bodyElement = wait.Until(ExpectedConditions.ElementIsVisible(By.TagName("body")));
                Actions builder = new Actions(driver);
                builder.MoveToElement(bodyElement, 0, 0).Perform();
            }

            myCommons.Log.Information($"{DateTime.Now}: Ingresando a la modal de Creación de Centros.");

            myCommons.CourseCreateCharacters(wait, driver, js, new List<SeleniumEntity> { seleniumEntities });

            myCommons.CourseByCode(wait, driver, js, seleniumEntities.Code);
            Thread.Sleep(1000);

            wait.Until(ExpectedConditions.ElementExists(By.Id("dvCourseCode")));
            wait.Until(ExpectedConditions.ElementIsVisible(By.Id("dvCourseCode")));
            IWebElement element = wait.Until(ExpectedConditions.ElementToBeClickable(By.Id("dvCourseCode")));

            // Espera para ver si se actualiza
            wait.Until(ExpectedConditions.ElementIsVisible(By.Id("dvCourseCode")));
            string displayedCode = driver.FindElement(By.Id("dvCourseCode")).Text;
            myCommons.Log.Information($"Código del Curso recuperado después de la búsqueda: {seleniumEntities.Code}");


            myCommons.Log.Information($"{DateTime.Now}: Se inicia la validación de los assert luego.");
            Assert.AreEqual(seleniumEntities.Code, displayedCode, "El código del Curso no coincide.");
            myCommons.Log.Information($"{DateTime.Now}: Validando el Assert por dvCourseCode coincida con {seleniumEntities.Code}.");


            wait.Until(ExpectedConditions.ElementIsVisible(By.Id("dvCourseName")));
            string displayedDescription = driver.FindElement(By.Id("dvCourseName")).Text;
            Assert.AreEqual(seleniumEntities.Description, displayedDescription, "El Nombre del Curso no coincide." + seleniumEntities.Description);
            myCommons.Log.Information($"{DateTime.Now}: Validando el Assert por dvCourseName coincida con: {seleniumEntities.Description} ");


            myCommons.SearchCourseByDescription(wait, driver, js, seleniumEntities.Description);

            //Espera que el elemento en el grid sea visble
            Thread.Sleep(1000);

            wait.Until(ExpectedConditions.ElementIsVisible(By.Id("dvCourseName")));
            displayedDescription = driver.FindElement(By.Id("dvCourseName")).Text;
            Assert.AreEqual(seleniumEntities.Description, displayedDescription, "el nombre del Curso no coincide." + seleniumEntities.Description);
            myCommons.Log.Information($"{DateTime.Now}: Validando el Assert por dvCourseName coincida con: {seleniumEntities.Description} ");



        }
    }
}