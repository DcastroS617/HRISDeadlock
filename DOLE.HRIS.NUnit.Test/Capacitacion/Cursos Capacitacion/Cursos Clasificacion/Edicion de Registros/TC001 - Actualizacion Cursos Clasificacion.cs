// Generated by Selenium IDE
using DOLE.HRIS.NUnit.Test;
using DOLE.HRIS.NUnit.Test.Utilities;
using NUnit.Framework;
using NUnit.Framework.Interfaces;
using OpenQA.Selenium;
using OpenQA.Selenium.Edge;
using OpenQA.Selenium.Interactions;
using OpenQA.Selenium.Support.UI;
using SeleniumExtras.WaitHelpers;
using Serilog;
using Serilog.Core;
using System;
using System.Collections.Generic;
using System.Configuration;
using System.Drawing;
using System.Net;
using System.Net.Http;
using System.Threading;
using System.Threading.Tasks;

namespace DOLE.HRIS.Application.Automation.Selenium
{
    [TestFixture]
    [Category("Cursos")]
    public class TC001ActualizacionCursosClasificacionTest
    {
        private readonly string urlEntorno = Environment.GetEnvironmentVariable("UrlApplicationForTesting", EnvironmentVariableTarget.Process);
        private string urlTest = "";
        private readonly List<SeleniumEntity> seleniumEntities = new List<SeleniumEntity>();
        private readonly List<SeleniumEntity> seleniumEntitiesEdited = new List<SeleniumEntity>();

        private readonly string urlScreen = "/Training/Maintenances/ClassificationCourse.aspx";
        private IWebDriver driver;
        public IDictionary<string, object> vars { get; private set; }
        private IJavaScriptExecutor js;
        WebDriverWait wait;
        Commons myCommons;

        [SetUp]
        public void SetUp()
        {
            urlTest = !string.IsNullOrEmpty(urlEntorno) ? urlEntorno : ConfigurationManager.AppSettings.Get("UrlApplicationForTesting");

            driver = new EdgeDriver();
            myCommons = new Commons();
            myCommons.log();

            wait = new WebDriverWait(driver, TimeSpan.FromSeconds(80));
            js = (IJavaScriptExecutor)driver;
            driver.Manage().Window.Maximize();

            vars = new Dictionary<string, object>();

            seleniumEntities.Add(new SeleniumEntity("CCLA01", "CCLA01_ClasificaciónAEditar001"));


            seleniumEntitiesEdited.Add(new SeleniumEntity("CCLA01", "CCLA011_ClasificaciónUpdate001"));
        }

        [TearDown]
        protected void TearDown()
        {
            if (TestContext.CurrentContext.Result.Outcome.Status == TestStatus.Failed)
            {
                myCommons.TakeScreenshot(driver, TestContext.CurrentContext.Test.Name);
            }

            driver.Quit();
        }

        [Test]
        public async Task TC001ActualizacionCursosClasificacion()
        {
            await myCommons.SeleniumSetup(wait, driver, urlTest, urlScreen);

            // Espera a que el botón con ID que contiene 'btnAdd' sea clickeable y haz clic en él
            wait.Until(ExpectedConditions.ElementToBeClickable(By.Id("ctl00_cntBody_btnAdd"))).Click();
            myCommons.Log.Information($"{DateTime.Now}: Ingresando a la modal de Creación de Curso Clasificación.");

            Thread.Sleep(1000);
            myCommons.ClassificationCourseCreateCharacters(wait, driver, js, seleniumEntities);
            myCommons.Log.Information($"{DateTime.Now}: Se crea el registro con los datos" + seleniumEntities[0].Code + seleniumEntities[0].Description);

            myCommons.ClassificationCourseByCode(wait, driver, js, seleniumEntities[0].Code);
            myCommons.Log.Information($"{DateTime.Now}: Buscar el registro recién creado" + seleniumEntities[0].Code + seleniumEntities[0].Description);
            Thread.Sleep(2000);
            wait.Until(ExpectedConditions.ElementExists(By.Id("dvClassificationCourseCode")));
            wait.Until(ExpectedConditions.ElementIsVisible(By.Id("dvClassificationCourseCode")));
            wait.Until(ExpectedConditions.ElementToBeClickable(By.Id("dvClassificationCourseCode"))).Click();

            myCommons.Log.Information($"{DateTime.Now}: Seleccionar el regiistro en el grid " + seleniumEntities[0].Code);

            Thread.Sleep(1500);
            var ButtonElement = driver.FindElement(By.Id("ctl00_cntBody_btnEdit"));
            IWebElement fieldElement = wait.Until(ExpectedConditions.ElementIsVisible(By.Id("ctl00_cntBody_btnEdit")));
            wait.Until(ExpectedConditions.ElementToBeClickable((ButtonElement))).Click();
            myCommons.Log.Information($"{DateTime.Now}: Ingresando en la modal de Edición");
            Thread.Sleep(500);

            myCommons.EditClassificationCourse(wait, driver, js, seleniumEntitiesEdited);
            myCommons.Log.Information($"{DateTime.Now}: Se edito el rgistro con los valores " + seleniumEntitiesEdited[0].Code + seleniumEntitiesEdited[0].Description);


            Utilities.CleanFields(js, "ctl00_cntBody_ClassCodeFilter");
            myCommons.Log.Information($"{DateTime.Now}: Limpiar filtro de código");


            myCommons.ClassificationCourseByDescription(wait, driver, js, seleniumEntitiesEdited[0].Description);
            myCommons.Log.Information($"{DateTime.Now}: Buscar registro recién editado" + seleniumEntitiesEdited[0].Description);
            Thread.Sleep(2000);
            wait.Until(ExpectedConditions.ElementExists(By.Id("dvClassificationCourseDesEs")));
            wait.Until(ExpectedConditions.ElementIsVisible(By.Id("dvClassificationCourseDesEs")));
            // Los asserts validan que el test case, realmente inserto las aulas
            string displayedCode = driver.FindElement(By.Id("dvClassificationCourseCode")).Text;
            Assert.AreEqual(seleniumEntities[0].Code, displayedCode, "El código del Curso Clasificación no coincide.");
            myCommons.Log.Information($"{DateTime.Now}: Validando el Assert por Código del Curso Clasificacion  " + seleniumEntitiesEdited[0].Code);


            string displayedDescription = driver.FindElement(By.Id("dvClassificationCourseDesEs")).Text;
            Assert.AreEqual(seleniumEntitiesEdited[0].Description, displayedDescription, "El nombre del Curso Clasificación no coincide.");
            myCommons.Log.Information($"{DateTime.Now}: Validando el Assert para el Nombre del Curso Clasificación " + seleniumEntitiesEdited[0].Description);
        }
        
    }
}