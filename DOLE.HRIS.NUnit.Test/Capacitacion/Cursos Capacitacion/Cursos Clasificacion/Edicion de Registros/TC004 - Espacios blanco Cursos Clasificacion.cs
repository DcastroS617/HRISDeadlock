// Generated by Selenium IDE
using DOLE.HRIS.Application.Automation.Selenium;
using DOLE.HRIS.NUnit.Test;
using DOLE.HRIS.NUnit.Test.Utilities;
using NUnit.Framework;
using NUnit.Framework.Interfaces;
using OpenQA.Selenium;
using OpenQA.Selenium.Edge;
using OpenQA.Selenium.Support.UI;
using SeleniumExtras.WaitHelpers;
using System;
using System.Collections.Generic;
using System.Configuration;
using System.Threading;
using System.Threading.Tasks;

namespace DOLE.HRIS.Application.Automation.Selenium
{
    [TestFixture]
    [Category("Cursos")]
    public class TC003EspaciosBlancosCursosClasificacionTest
    {
        private readonly string urlEntorno = Environment.GetEnvironmentVariable("UrlApplicationForTesting", EnvironmentVariableTarget.Process);
        private string urlTest = "";

        private readonly string urlScreen = "/Training/Maintenances/ClassificationCourse.aspx";


        private readonly List<SeleniumEntity> seleniumEntities = new List<SeleniumEntity>();

        private readonly SeleniumEntity seleniumEntitiesEmpty = new SeleniumEntity("CUCL001", "   ");


        private IWebDriver driver;
        WebDriverWait wait;
        public IDictionary<string, object> vars { get; private set; }
        private IJavaScriptExecutor js;

        Commons myCommons;
        string expectedErrorMessage = "Por favor verifique los campos marcados en el formulario, corrija los errores e intente nuevamente.";

        [SetUp]
        public void SetUp()
        {
            urlTest = !string.IsNullOrEmpty(urlEntorno) ? urlEntorno : ConfigurationManager.AppSettings.Get("UrlApplicationForTesting");
            driver = new EdgeDriver();
            driver.Manage().Window.Maximize();

            // Inicializa el ejecutor de JavaScript y el diccionario de variables
            js = (IJavaScriptExecutor)driver;
            vars = new Dictionary<string, object>();

            myCommons = new Commons();
            myCommons.log();
            wait = new WebDriverWait(driver, TimeSpan.FromSeconds(60));

            seleniumEntities.Add(new SeleniumEntity("CUCL001", "CUCL001_EditarConEmpty"));
        }

        [TearDown]
        protected void TearDown()
        {
            if (TestContext.CurrentContext.Result.Outcome.Status == TestStatus.Failed)
            {
                myCommons.TakeScreenshot(driver, TestContext.CurrentContext.Test.Name);
            }

            driver.Quit();
        }

        [Test]
        public async Task TC003EspaciosBlancosCursosClasificacion()
        {
            await myCommons.SeleniumSetup(wait, driver, urlTest, urlScreen);
            Thread.Sleep(1000);
            wait.Until(ExpectedConditions.ElementIsVisible(By.Id("ctl00_cntBody_btnAdd")));
            wait.Until(ExpectedConditions.ElementToBeClickable(By.Id("ctl00_cntBody_btnAdd"))).Click();
            myCommons.Log.Information($"{DateTime.Now}: Ingresando a la modal de Creación de Curso de Clasificación.");

            //AgregarPropositos(seleniumEntities);
            myCommons.ClassificationCourseCreateCharacters(wait, driver, js, seleniumEntities);
            myCommons.Log.Information($"{DateTime.Now}: Curso de Clasificación creado Exitosamente.");


            Thread.Sleep(500);

            myCommons.ClassificationCourseByCode(wait, driver, js, seleniumEntities[0].Code);
            myCommons.Log.Information($"{DateTime.Now}: Buscar el registro recién creado" + seleniumEntities[0].Code + seleniumEntities[0].Description);
            Thread.Sleep(1000);

            wait.Until(ExpectedConditions.ElementIsVisible(By.Id("dvClassificationCourseCode")));
            wait.Until(ExpectedConditions.ElementToBeClickable(By.Id("dvClassificationCourseCode"))).Click();
            myCommons.Log.Information($"{DateTime.Now}: Click en el registro a Editar " + seleniumEntities[0].Code);


            Thread.Sleep(1500);
            var ButtonElement = driver.FindElement(By.Id("ctl00_cntBody_btnEdit"));
            IWebElement fieldElement = wait.Until(ExpectedConditions.ElementIsVisible(By.Id("ctl00_cntBody_btnEdit")));
            wait.Until(ExpectedConditions.ElementToBeClickable((ButtonElement))).Click();
            myCommons.Log.Information($"{DateTime.Now}: Ingresando en la modal de Edición");
            Thread.Sleep(500);

            wait.Until(ExpectedConditions.ElementIsVisible(By.Id("ctl00_cntBody_ClassificationCourseDescriptionEsEdit")));

            wait.Until(ExpectedConditions.ElementToBeClickable(By.Id("ctl00_cntBody_ClassificationCourseDescriptionEsEdit"))).Click();
            Utilities.CleanFields(js, "ctl00_cntBody_ClassificationCourseDescriptionEsEdit");
            driver.FindElement(By.Id("ctl00_cntBody_ClassificationCourseDescriptionEsEdit")).SendKeys(seleniumEntitiesEmpty.Description);
            myCommons.Log.Information($"{DateTime.Now}: Modificar la descripción empty " + seleniumEntitiesEmpty.Description);


            wait.Until(ExpectedConditions.ElementToBeClickable(By.CssSelector("#ctl00_cntBody_uppDialogControl .form-horizontal"))).Click();
            wait.Until(ExpectedConditions.ElementToBeClickable(By.CssSelector(".col-sm-8 .active"))).Click();
            myCommons.Log.Information($"{DateTime.Now}: Click en check de Habilitado");


            wait.Until(ExpectedConditions.ElementToBeClickable(By.Id("ctl00_cntBody_btnAccept"))).Click();
            myCommons.Log.Information($"{DateTime.Now}: Click en el botón de Aceptar para Editar ");

            Thread.Sleep(1500);
            wait.Until(ExpectedConditions.ElementExists(By.CssSelector("h3[class='panel-title text-center']")));

            wait.Until(ExpectedConditions.ElementIsVisible(By.CssSelector("h3[class='panel-title text-center']")));

            string errorMessage = driver.FindElement(By.CssSelector("div[class='panel-body text-center']")).Text;

            Assert.AreEqual(expectedErrorMessage, errorMessage, "Error Message Incorrecto.");
            myCommons.Log.Information($"{DateTime.Now}:Validando el Assert con el mensaje:  " + errorMessage);
        }
    }
}