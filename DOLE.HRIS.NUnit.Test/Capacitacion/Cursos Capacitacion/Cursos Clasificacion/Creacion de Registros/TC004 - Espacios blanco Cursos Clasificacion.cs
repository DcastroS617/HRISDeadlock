// Generated by Selenium IDE
using DOLE.HRIS.NUnit.Test;
using DOLE.HRIS.NUnit.Test.Utilities;
using NUnit.Framework;
using NUnit.Framework.Interfaces;
using OpenQA.Selenium;
using OpenQA.Selenium.Edge;
using OpenQA.Selenium.Interactions;
using OpenQA.Selenium.Support.UI;
using SeleniumExtras.WaitHelpers;
using Serilog;
using Serilog.Core;
using System;
using System.Collections.Generic;
using System.Configuration;
using System.Drawing;
using System.Net;
using System.Net.Http;
using System.Threading;
using System.Threading.Tasks;

namespace DOLE.HRIS.Application.Automation.Selenium
{
    [TestFixture]
    [Category("Cursos")]
    public class TC004EspaciosBlancosCursosClasificacionCreacionTest
    {
        private readonly string urlEntorno = Environment.GetEnvironmentVariable("UrlApplicationForTesting", EnvironmentVariableTarget.Process);
        private string urlTest = "";
        private readonly string urlScreen = "/Training/Maintenances/ClassificationCourse.aspx";


        private readonly SeleniumEntity seleniumEntities = new SeleniumEntity("", "");

        string expectedErrorMessage = "Por favor verifique los campos marcados en el formulario, corrija los errores e intente nuevamente.";


        private IWebDriver driver;
        WebDriverWait wait;
        public IDictionary<string, object> vars { get; private set; }
        private IJavaScriptExecutor js;
        //Actions actions;
        Commons myCommons;

        [SetUp]
        public void SetUp()
        {
            urlTest = !string.IsNullOrEmpty(urlEntorno) ? urlEntorno : ConfigurationManager.AppSettings.Get("UrlApplicationForTesting");
            driver = new EdgeDriver();
            myCommons = new Commons();
            myCommons.log();

            wait = new WebDriverWait(driver, TimeSpan.FromSeconds(60));


            driver.Manage().Window.Maximize();
            // Inicializa el ejecutor de JavaScript y el diccionario de variables

            js = (IJavaScriptExecutor)driver;
            vars = new Dictionary<string, object>();
        }

        [TearDown]
        protected void TearDown()
        {
            if (TestContext.CurrentContext.Result.Outcome.Status == TestStatus.Failed)
            {
                myCommons.TakeScreenshot(driver, TestContext.CurrentContext.Test.Name);
            }

            driver.Quit();
        }

        [Test]
        public async Task TC004EspaciosBlancosCursosClasificacionCreacion()
        {
            await myCommons.SeleniumSetup(wait, driver, urlTest, urlScreen);

            // Espera a que el botón con ID que contiene 'btnAdd' sea clickeable y haz clic en él
            wait.Until(ExpectedConditions.ElementIsVisible(By.Id("ctl00_cntBody_btnAdd")));
            wait.Until(ExpectedConditions.ElementToBeClickable(By.Id("ctl00_cntBody_btnAdd"))).Click();
            Thread.Sleep(500);
            myCommons.Log.Information($"{DateTime.Now}: Ingresando a la modal de Creación de Cursos Clasificación.");

            wait.Until(ExpectedConditions.ElementIsVisible(By.Id("ctl00_cntBody_ClassificationCourseCodeEdit")));
            wait.Until(ExpectedConditions.ElementToBeClickable(By.Id("ctl00_cntBody_ClassificationCourseCodeEdit"))).Click();
            driver.FindElement(By.Id("ctl00_cntBody_ClassificationCourseCodeEdit")).SendKeys(seleniumEntities.Code);

            wait.Until(ExpectedConditions.ElementIsVisible(By.Id("ctl00_cntBody_ClassificationCourseDescriptionEsEdit")));
            wait.Until(ExpectedConditions.ElementToBeClickable(By.Id("ctl00_cntBody_ClassificationCourseDescriptionEsEdit"))).Click();
            driver.FindElement(By.Id("ctl00_cntBody_ClassificationCourseDescriptionEsEdit")).SendKeys(seleniumEntities.Description);


            wait.Until(ExpectedConditions.ElementIsVisible(By.Id("ctl00_cntBody_ClassificationCourseDescriptionEnEdit")));
            wait.Until(ExpectedConditions.ElementToBeClickable(By.Id("ctl00_cntBody_ClassificationCourseDescriptionEnEdit"))).Click();
            driver.FindElement(By.Id("ctl00_cntBody_ClassificationCourseDescriptionEnEdit")).SendKeys(seleniumEntities.Description);


            wait.Until(ExpectedConditions.ElementToBeClickable(By.CssSelector("#ctl00_cntBody_uppDialogControl .form-horizontal"))).Click();
            wait.Until(ExpectedConditions.ElementToBeClickable(By.CssSelector(".col-sm-8 .active"))).Click();


            wait.Until(ExpectedConditions.ElementToBeClickable(By.Id("ctl00_cntBody_btnAccept"))).Click();

            Thread.Sleep(1000);

            wait.Until(ExpectedConditions.ElementIsVisible(By.CssSelector("h3[class='panel-title text-center']")));

            string errorMessage = driver.FindElement(By.CssSelector("div[class='panel-body text-center']")).Text;

            Assert.AreEqual(expectedErrorMessage, errorMessage, "Error Message Incorrecto.");
            myCommons.Log.Information($"{DateTime.Now}:Validando el Assert con el mensaje:  " + errorMessage);
        }
    }
}