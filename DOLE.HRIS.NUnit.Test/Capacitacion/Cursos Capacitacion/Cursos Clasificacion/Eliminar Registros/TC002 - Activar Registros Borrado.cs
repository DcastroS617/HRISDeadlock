// Generated by Selenium IDE
using DOLE.HRIS.NUnit.Test;
using DOLE.HRIS.NUnit.Test.Utilities;
using NUnit.Framework;
using NUnit.Framework.Interfaces;
using OpenQA.Selenium;
using OpenQA.Selenium.Edge;
using OpenQA.Selenium.Interactions;
using OpenQA.Selenium.Support.UI;
using SeleniumExtras.WaitHelpers;
using System;
using System.Collections.Generic;
using System.Configuration;
using System.Threading;
using System.Threading.Tasks;

namespace DOLE.HRIS.Application.Automation.Selenium
{
    [TestFixture]
    [Category("Cursos")]
    public class TC002ActivarRegistroBorradoCursosClasificacionTest
    {
        private readonly string urlEntorno = Environment.GetEnvironmentVariable("UrlApplicationForTesting", EnvironmentVariableTarget.Process);
        private string urlTest = "";
        private readonly string urlScreen = "/Training/Maintenances/ClassificationCourse.aspx";

        private readonly SeleniumEntity seleniumEntities = new SeleniumEntity("CCRA001", "CCRA001_CursoClasiActivar");
        private IWebDriver driver;
        WebDriverWait wait;
        public IDictionary<string, object> vars { get; private set; }
        private IJavaScriptExecutor js;

        string expectedErrorMessage = "Los datos ingresados provocan un conflicto con otro registro por duplicidad de Código.\nLos datos del registro existente son los siguientes:";
        Commons myCommons;

        [SetUp]
        public void SetUp()
        {
            urlTest = !string.IsNullOrEmpty(urlEntorno) ? urlEntorno : ConfigurationManager.AppSettings.Get("UrlApplicationForTesting");
            driver = new EdgeDriver();
            driver.Manage().Window.Maximize();
            myCommons = new Commons();
            myCommons.log();
            wait = new WebDriverWait(driver, TimeSpan.FromSeconds(60));

            js = (IJavaScriptExecutor)driver;
            vars = new Dictionary<string, object>();
        }

        [TearDown]
        protected void TearDown()
        {
            if (TestContext.CurrentContext.Result.Outcome.Status == TestStatus.Failed)
            {
                myCommons.TakeScreenshot(driver, TestContext.CurrentContext.Test.Name);
            }

            driver.Quit();
        }

        [Test]
        public async Task TC002ActivarRegistroBorradoCursosClasificacion()
        {
            await myCommons.SeleniumSetup(wait, driver, urlTest, urlScreen);
            Thread.Sleep(1000);
            wait.Until(ExpectedConditions.ElementIsVisible(By.Id("ctl00_cntBody_btnAdd")));
            wait.Until(ExpectedConditions.ElementToBeClickable(By.Id("ctl00_cntBody_btnAdd"))).Click();
            myCommons.Log.Information($"{DateTime.Now}: Ingresando a laa modal de Creación de Cursos de Clasificación.");

            Thread.Sleep(500);
            myCommons.Log.Information($"{DateTime.Now}: Ingresando a la modal de Creación de Cursos de Clasificación.");
            myCommons.ClassificationCourseCreateCharacters(wait, driver, js, new List<SeleniumEntity> { seleniumEntities });

            myCommons.ClassificationCourseByCode(wait, driver, js, seleniumEntities.Code);
            myCommons.Log.Information($"{DateTime.Now}: Buscar el registro." + seleniumEntities.Code);
            Thread.Sleep(2000);

            myCommons.DeleteClassificationCourse(wait, driver, js, seleniumEntities.Code);
            myCommons.Log.Information($"{DateTime.Now}:Se elimina el registro." + seleniumEntities.Code);
            Utilities.CleanFields(js, "ctl00_cntBody_ClassCodeFilter");
            myCommons.Log.Information($"{DateTime.Now}:limpiar el filtro de Código." + seleniumEntities.Code);

            Thread.Sleep(1000);
            wait.Until(ExpectedConditions.ElementIsVisible(By.Id("ctl00_cntBody_btnAdd")));
            wait.Until(ExpectedConditions.ElementToBeClickable(By.Id("ctl00_cntBody_btnAdd"))).Click();
            myCommons.Log.Information($"{DateTime.Now}: Ingresando nuevamente en la modal de Creación del Cursos de Clasificación.");
            //AgregarCentro(seleniumEntities);

            myCommons.ReactivedClassificationCourse(wait, driver, js, new List<SeleniumEntity> { seleniumEntities });

                   

            myCommons.ClassificationCourseByCode(wait, driver, js, seleniumEntities.Code);
            Thread.Sleep(1000);

            // Los asserts validan que el test case, realmente inserto los centros
            wait.Until(ExpectedConditions.ElementIsVisible(By.Id("dvClassificationCourseCode")));
            string displayedCode = driver.FindElement(By.Id("dvClassificationCourseCode")).Text;
            Assert.AreEqual(seleniumEntities.Code, displayedCode, "La código de la Curso de Clasificación no coincide.");
            myCommons.Log.Information($"{DateTime.Now}: Validando el Assert por Código de la Curos de Clasificación  " + seleniumEntities.Code);

            wait.Until(ExpectedConditions.ElementIsVisible(By.Id("dvClassificationCourseDesEs")));
            string displayedDescription = driver.FindElement(By.Id("dvClassificationCourseDesEs")).Text;
            Assert.AreEqual(seleniumEntities.Description, displayedDescription, "El Nombre del Curso de Clasificación no coincide.");
            myCommons.Log.Information($"{DateTime.Now}: Validando el Assert por nombre del curso de Clasificación  " + seleniumEntities.Description);
        }
    }
}