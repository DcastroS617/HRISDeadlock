// Generated by Selenium IDE
using DOLE.HRIS.NUnit.Test;
using DOLE.HRIS.NUnit.Test.Utilities;
using NUnit.Framework;
using NUnit.Framework.Interfaces;
using OpenQA.Selenium;
using OpenQA.Selenium.Edge;
using OpenQA.Selenium.Interactions;
using OpenQA.Selenium.Support.UI;
using SeleniumExtras.WaitHelpers;
using Serilog;
using Serilog.Core;
using System;
using System.Collections.Generic;
using System.Configuration;
using System.IO;
using System.Net;
using System.Net.Http;
using System.Net.NetworkInformation;
using System.Threading;
using System.Threading.Tasks;

namespace DOLE.HRIS.Application.Automation.Selenium
{
    [TestFixture]
    [Category("Propositos")]
    public class TC002ActivarRegistroBorradoPropositoEntrenamientoTest
    {
        private readonly string urlEntorno = Environment.GetEnvironmentVariable("UrlApplicationForTesting", EnvironmentVariableTarget.Process);
        private string urlTest = "";
        private readonly string urlScreen = "/Training/Maintenances/TrainingPurpose.aspx";

        private readonly SeleniumEntity seleniumEntities = new SeleniumEntity("PUA001", "PUA001_PropositoReactivar");
        private IWebDriver driver;
        WebDriverWait wait;
        public IDictionary<string, object> vars { get; private set; }
        private IJavaScriptExecutor js;
        string expectedErrorMessage = "Los datos ingresados provocan un conflicto con otro registro por duplicidad de código.\nLos datos del registro existente son los siguientes:";
        Commons myCommons;

        [SetUp]
        public void SetUp()
        {
            urlTest = !string.IsNullOrEmpty(urlEntorno) ? urlEntorno : ConfigurationManager.AppSettings.Get("UrlApplicationForTesting");
            driver = new EdgeDriver();
            driver.Manage().Window.Maximize();
            myCommons = new Commons();
            myCommons.log();
            wait = new WebDriverWait(driver, TimeSpan.FromSeconds(60));

            js = (IJavaScriptExecutor)driver;
            vars = new Dictionary<string, object>();
        }

        [TearDown]
        protected void TearDown()
        {
            if (TestContext.CurrentContext.Result.Outcome.Status == TestStatus.Failed)
            {
                myCommons.TakeScreenshot(driver, TestContext.CurrentContext.Test.Name);
            }

            driver.Quit();
        }

        [Test]
      

        public async Task  TC002ActivarRegistroBorradoPropositoEntrenamiento()

        {
            await myCommons.SeleniumSetup(wait, driver, urlTest, urlScreen);
            Thread.Sleep(1000);
            wait.Until(ExpectedConditions.ElementIsVisible(By.Id("ctl00_cntBody_btnAdd")));
            wait.Until(ExpectedConditions.ElementToBeClickable(By.Id("ctl00_cntBody_btnAdd"))).Click();
            myCommons.Log.Information($"{DateTime.Now}: Ingresando a la modal de Creación de Propósitos.");

            //AgregarCentro(seleniumEntities);
            Thread.Sleep(500);
            myCommons.Log.Information($"{DateTime.Now}: Ingresando a la modal de Creación de Propósito.");
            myCommons.AgregarProposito(wait, driver, js, new List<SeleniumEntity> { seleniumEntities });

            myCommons.BuscarPropositoPorCodigo(wait, driver, js, seleniumEntities.Code);
            myCommons.Log.Information($"{DateTime.Now}: Buscar el registro." + seleniumEntities.Code);
            Thread.Sleep(1000);
            myCommons.DeletePurpose(wait, driver, js, seleniumEntities.Code);
            myCommons.Log.Information($"{DateTime.Now}:Se elimina el registro." + seleniumEntities.Code);
            Utilities.CleanFields(js, "ctl00_cntBody_txtTrainingProgramCodeFilter");
            myCommons.Log.Information($"{DateTime.Now}:limpiar el filtro de Código." + seleniumEntities.Code);

            Thread.Sleep(1000);
            wait.Until(ExpectedConditions.ElementIsVisible(By.Id("ctl00_cntBody_btnAdd")));
            wait.Until(ExpectedConditions.ElementToBeClickable(By.Id("ctl00_cntBody_btnAdd"))).Click();
            myCommons.Log.Information($"{DateTime.Now}: Ingresando nuevamente en la modal de Creación de Propósitos.");
            //AgregarCentro(seleniumEntities);
            AgregarPropositoaActivar();

            //Assert para validar la modal de Registro Desactivado
            wait.Until(ExpectedConditions.ElementExists(By.Id("ctl00_cntBody_divActivateDeletedDialog")));
            wait.Until(ExpectedConditions.ElementIsVisible(By.Id("ctl00_cntBody_divActivateDeletedDialog")));
            string errorMessage = driver.FindElement(By.Id("ctl00_cntBody_divActivateDeletedDialog")).Text;
            errorMessage = errorMessage.Replace("\r", "");
            Assert.AreEqual(expectedErrorMessage, errorMessage, "El mensaje de error no coincide con el esperado.");
            myCommons.Log.Information($"{DateTime.Now}:Despliegue de modal de Registro desactivado con el mensaje " + expectedErrorMessage);

            wait.Until(ExpectedConditions.ElementToBeClickable(By.Id("ctl00_cntBody_btnActivateDeletedAccept"))).Click();
            myCommons.Log.Information($"{DateTime.Now}: Botón de Aceptar para agregar nuevamente el registro Desactivado");


            wait.Until(ExpectedConditions.ElementIsVisible(By.CssSelector("div.alert.alert-autocloseable-msg.alert-success")));
            var alert = driver.FindElements(By.CssSelector("div.alert.alert-autocloseable-msg.alert-success"));
            if (alert.Count > 0)
            {
                wait.Until(ExpectedConditions.ElementIsVisible(By.CssSelector("div.alert.alert-autocloseable-msg.alert-success")));
            }
            else
            {
                myCommons.Log.Information("No se encontró la alerta de éxito");
            }
            wait.Until(ExpectedConditions.InvisibilityOfElementLocated(By.CssSelector("div.alert.alert-autocloseable-msg.alert-success")));

            Thread.Sleep(1500);


            myCommons.BuscarPropositoPorCodigo(wait, driver, js, seleniumEntities.Code);
            Thread.Sleep(1000);
            // Los asserts validan que el test case, realmente inserto el registro
            wait.Until(ExpectedConditions.ElementExists(By.Id("dvTrainingProgramCode")));
            wait.Until(ExpectedConditions.ElementIsVisible(By.Id("dvTrainingProgramCode")));
            string displayedCode = driver.FindElement(By.Id("dvTrainingProgramCode")).Text;
            Assert.AreEqual(seleniumEntities.Code, displayedCode, "La código del Propósito no coincide.");
            myCommons.Log.Information($"{DateTime.Now}: Validando el Assert por Código del Propósito  " + seleniumEntities.Code);

            wait.Until(ExpectedConditions.ElementIsVisible(By.Id("dvTrainingProgramName")));
            string displayedDescription = driver.FindElement(By.Id("dvTrainingProgramName")).Text;
            Assert.AreEqual(seleniumEntities.Description, displayedDescription, "La descripción del Propósito no coincide.");
            myCommons.Log.Information($"{DateTime.Now}: Validando el Assert por Descripción del Propósito de capacitación  " + seleniumEntities.Description);


            //Thread.Sleep(3000);
        }

        private void AgregarPropositoaActivar()
        {
            IWebElement fieldElement = wait.Until(ExpectedConditions.ElementIsVisible(By.Id("ctl00_cntBody_txtTrainingProgramCode")));
            wait.Until(ExpectedConditions.ElementToBeClickable(By.Id("ctl00_cntBody_txtTrainingProgramCode"))).Click();
            driver.FindElement(By.Id("ctl00_cntBody_txtTrainingProgramCode")).SendKeys(seleniumEntities.Code);
            Serilog.Log.Information($"{DateTime.Now}:Ingresando el código del Propósito {seleniumEntities.Code}");


            wait.Until(ExpectedConditions.ElementToBeClickable(By.Id("ctl00_cntBody_txtTrainingProgramName"))).Click();
            driver.FindElement(By.Id("ctl00_cntBody_txtTrainingProgramName")).SendKeys(seleniumEntities.Description);
            Serilog.Log.Information($"{DateTime.Now}:Ingresando de la descripción del Propósito {seleniumEntities.Description}");


            wait.Until(ExpectedConditions.ElementToBeClickable(By.CssSelector("#ctl00_cntBody_uppDialogControl .form-horizontal"))).Click();
            wait.Until(ExpectedConditions.ElementToBeClickable(By.CssSelector(".col-sm-8 .active"))).Click();

            Serilog.Log.Information($"{DateTime.Now}:Click en el boton de activar el Propósito");

            wait.Until(ExpectedConditions.ElementIsVisible(By.Id("ctl00_cntBody_btnAccept")));
            wait.Until(ExpectedConditions.ElementToBeClickable(By.Id("ctl00_cntBody_btnAccept"))).Click();
            Serilog.Log.Information($"{DateTime.Now}: Click en Acpeptar para Guardar el Registro de Nuevo Propósito ");



            Serilog.Log.Information($"{DateTime.Now}: Registro creado.   " + seleniumEntities.Code + seleniumEntities.Description);

        }
    }
}