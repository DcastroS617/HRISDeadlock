// Generated by Selenium IDE
using DOLE.HRIS.NUnit.Test;
using DOLE.HRIS.NUnit.Test.Utilities;
using NUnit.Framework;
using NUnit.Framework.Interfaces;
using OpenQA.Selenium;
using OpenQA.Selenium.Edge;
using OpenQA.Selenium.Interactions;
using OpenQA.Selenium.Support.UI;
using SeleniumExtras.WaitHelpers;
using Serilog;
using Serilog.Core;
using System;
using System.Collections.Generic;
using System.Configuration;
using System.IO;
using System.Net;
using System.Net.Http;
using System.Net.NetworkInformation;
using System.Threading;
using System.Threading.Tasks;
using System.Xml.Linq;

namespace DOLE.HRIS.Application.Automation.Selenium
{
    [TestFixture]
    [Category("Aulas")]
    public class TC003SobreescribirRegistroBorradoCentroEntrenamientoTest
    {
        private readonly string urlEntorno = Environment.GetEnvironmentVariable("UrlApplicationForTesting", EnvironmentVariableTarget.Process);
        private string urlTest = "";
        private readonly string urlScreen = "/Training/Maintenances/TrainingCenters.aspx";
        
        private readonly SeleniumEntity seleniumEntities = new SeleniumEntity("CSE001", "CSE001_SobreescribirBorrado");
        private readonly SeleniumEntity seleniumEntitiesEdited = new SeleniumEntity("CSE001", "CSE001_SobreescribiryActivarCentro");

        private IWebDriver driver;
        WebDriverWait wait;
        public IDictionary<string, object> vars { get; private set; }
        private IJavaScriptExecutor js;
        Commons myCommons;
        string expectedErrorMessage = "Los datos ingresados provocan un conflicto con otro registro por duplicidad de código.\nLos datos del registro existente son los siguientes:";

        

        [SetUp]
        public void SetUp()
        {
            urlTest = !string.IsNullOrEmpty(urlEntorno) ? urlEntorno : ConfigurationManager.AppSettings.Get("UrlApplicationForTesting");
            driver = new EdgeDriver();
            driver.Manage().Window.Maximize();
            myCommons = new Commons();
            myCommons.log();
            wait = new WebDriverWait(driver, TimeSpan.FromSeconds(60));

            js = (IJavaScriptExecutor)driver;
            vars = new Dictionary<string, object>();
        }

        [TearDown]
        protected void TearDown()
        {
            if (TestContext.CurrentContext.Result.Outcome.Status == TestStatus.Failed)
            {
                myCommons.TakeScreenshot(driver, TestContext.CurrentContext.Test.Name);
            }

            driver.Quit();
        }
        [Test]
        public async Task TC003SobreescribirRegistroBorradoCentroEntrenamiento()
        {

            await myCommons.SeleniumSetup(wait, driver, urlTest, urlScreen);
         
            wait.Until(ExpectedConditions.ElementIsVisible(By.Id("ctl00_cntBody_btnAdd")));
            wait.Until(ExpectedConditions.ElementToBeClickable(By.Id("ctl00_cntBody_btnAdd"))).Click();
            myCommons.Log.Information($"{DateTime.Now}: Ingresando a la modal de Creación de Centros.");

            //AgregarCentro();
            myCommons.AgregarCentro(wait, driver, js, new List<SeleniumEntity> { seleniumEntities });


            myCommons.BuscarCentros(wait, driver, js, seleniumEntities.Code);
            myCommons.Log.Information($"{DateTime.Now}: Buscar el registro." + seleniumEntities.Code);

            myCommons.BorrarCentroCapacitacion(wait, driver, js, seleniumEntities.Code);
            myCommons.Log.Information($"{DateTime.Now}:Se elimina el registro." + seleniumEntities.Code);
            Utilities.CleanFields(js, "ctl00_cntBody_txtTrainingCenterCodeFilter");
            myCommons.Log.Information($"{DateTime.Now}:limpiar el filtro de Código." + seleniumEntities.Code);

            //Thread.Sleep(1000);

            wait.Until(ExpectedConditions.ElementIsVisible(By.Id("ctl00_cntBody_btnAdd")));
            wait.Until(ExpectedConditions.ElementToBeClickable(By.Id("ctl00_cntBody_btnAdd"))).Click();
            myCommons.Log.Information($"{DateTime.Now}: Ingresando nuevamente en la modal de Creación de Centros.");
            ModificarDescripcionCentroDesactivado();

            //Assert para validar la modal de Registro Desactivado
            wait.Until(ExpectedConditions.ElementIsVisible(By.Id("ctl00_cntBody_divActivateDeletedDialog")));
            string errorMessage = driver.FindElement(By.Id("ctl00_cntBody_divActivateDeletedDialog")).Text;
            errorMessage = errorMessage.Replace("\r", "");
            Assert.AreEqual(expectedErrorMessage, errorMessage, "El mensaje de error no coincide con el esperado.");
            myCommons.Log.Information($"{DateTime.Now}:Despliegue de modal de Registro desactivado con el mensaje " + expectedErrorMessage);


            wait.Until(ExpectedConditions.ElementIsVisible(By.Id("ctl00_cntBody_divActivateDeletedDialog")));
            // Esperar hasta que el segundo toggle sea visible
            IWebElement secondToggle = wait.Until(ExpectedConditions.ElementToBeClickable(By.CssSelector("#ctl00_cntBody_chkUpdateActivateDeleted + .toggle-group .toggle-handle")));

            // Hacer clic en el botón del toggle
            secondToggle.Click();
            myCommons.Log.Information($"{DateTime.Now}:Seleccionando Si para Activar registro encontrado actualizando con los nuevos datos ");


            //Thread.Sleep(1000);
            wait.Until(ExpectedConditions.ElementIsVisible(By.Id("ctl00_cntBody_btnActivateDeletedAccept")));
            driver.FindElement(By.Id("ctl00_cntBody_btnActivateDeletedAccept")).Click();
            myCommons.Log.Information($"{DateTime.Now}: Botón de Aceptar para agregar nuevamente el registro Desactivado con el cambio en la descripción CAC001CentroReactivarModificar");

            Thread.Sleep(1500);

             wait.Until(ExpectedConditions.ElementExists(By.CssSelector("div.alert.alert-autocloseable-msg.alert-success")));
             wait.Until(ExpectedConditions.ElementIsVisible(By.CssSelector("div.alert.alert-autocloseable-msg.alert-success")));
             wait.Until(ExpectedConditions.InvisibilityOfElementLocated(By.CssSelector("div.alert.alert-autocloseable-msg.alert-success")));


             Thread.Sleep(1500);


            wait.Until(ExpectedConditions.ElementIsVisible(By.Id("ctl00_cntBody_txtTrainingCenterDescriptionFilter")));
            Utilities.CleanFields(js, "ctl00_cntBody_txtTrainingCenterDescriptionFilter");
            driver.FindElement(By.Id("ctl00_cntBody_txtTrainingCenterDescriptionFilter")).SendKeys(seleniumEntitiesEdited.Description);
            myCommons.Log.Information($"{DateTime.Now}:Buscar la descripción del Centro recién agregado "  + seleniumEntitiesEdited.Description);

            driver.FindElement(By.Id("ctl00_cntBody_btnSearch")).Click();

            Thread.Sleep(1000);

            wait.Until(ExpectedConditions.ElementIsVisible(By.Id("dvTrainingCenterDescription")));
            
            string displayedDescription = driver.FindElement(By.Id("dvTrainingCenterDescription")).Text;
            Assert.AreEqual(seleniumEntitiesEdited.Description, displayedDescription, "La descripción del Centro no coincide.");
            myCommons.Log.Information($"{DateTime.Now}: Validando el Assert por Descripción del Centro de capacitación  " + seleniumEntitiesEdited.Description);

            wait.Until(ExpectedConditions.ElementIsVisible(By.Id("dvPlaceLocation")));

            string displayedPlaceLocation = driver.FindElement(By.Id("dvPlaceLocation")).Text;
            Assert.AreEqual("Externo", displayedPlaceLocation, "El lugar centro de capacitación no coincide.");
            myCommons.Log.Information($"{DateTime.Now}: Validando el Assert para el Lugar del  Centro de Capacitación que ha sido modificado   " + displayedPlaceLocation);


            Thread.Sleep(1500);
        }

        private void ModificarDescripcionCentroDesactivado()
        {
            Serilog.Log.Information($"{DateTime.Now}: Ingresando modal de creación de Centros");
            IWebElement fieldElement = wait.Until(ExpectedConditions.ElementIsVisible(By.Id("ctl00_cntBody_txtTrainingCenterCode")));
            driver.FindElement(By.Id("ctl00_cntBody_txtTrainingCenterCode")).Click();
            driver.FindElement(By.Id("ctl00_cntBody_txtTrainingCenterCode")).SendKeys(seleniumEntitiesEdited.Code);
            Serilog.Log.Information($"{DateTime.Now}: Ingresando el código del Centro " + seleniumEntitiesEdited.Code);

            wait.Until(ExpectedConditions.ElementIsVisible(By.Id("ctl00_cntBody_txtTrainingCenterDescription")));
            driver.FindElement(By.Id("ctl00_cntBody_txtTrainingCenterDescription")).Click();
            Utilities.CleanFields(js, "ctl00_cntBody_txtTrainingCenterDescription");
            driver.FindElement(By.Id("ctl00_cntBody_txtTrainingCenterDescription")).SendKeys(seleniumEntitiesEdited.Description);
            Serilog.Log.Information($"{DateTime.Now}: Modificando la descripción " + seleniumEntitiesEdited.Description);

            var locationDropdown = new SelectElement(wait.Until(ExpectedConditions.ElementIsVisible(By.Id("ctl00_cntBody_cboPlaceLocation"))));
            locationDropdown.SelectByText("Externo");
            Serilog.Log.Information($"{DateTime.Now}: Cambiando Lugar" + "Externo");

            wait.Until(ExpectedConditions.ElementIsVisible(By.CssSelector("#ctl00_cntBody_uppDialogControl .form-horizontal")));
            driver.FindElement(By.CssSelector("#ctl00_cntBody_uppDialogControl .form-horizontal")).Click();
            driver.FindElement(By.CssSelector(".col-sm-8 .active")).Click();
            Serilog.Log.Information($"{DateTime.Now}: Seleccionando la opción de Habilitado con SI");

            driver.FindElement(By.Id("ctl00_cntBody_btnAccept")).Click();
            Serilog.Log.Information($"{DateTime.Now}:Clcik en en boton de Aceptar para guardar el registro");


         
            Thread.Sleep(1500);

            myCommons.Log.Information($"{DateTime.Now}: Registro modificado.   " + seleniumEntitiesEdited.Code + seleniumEntitiesEdited.Description);
            //return fieldElement;
        }

        
    }
}