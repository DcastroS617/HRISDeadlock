// Generated by Selenium IDE
using DOLE.HRIS.NUnit.Test;
using DOLE.HRIS.NUnit.Test.Utilities;
using NUnit.Framework;
using NUnit.Framework.Interfaces;
using OpenQA.Selenium;
using OpenQA.Selenium.DevTools;
using OpenQA.Selenium.Edge;
using OpenQA.Selenium.Interactions;
using OpenQA.Selenium.Support.UI;
using SeleniumExtras.WaitHelpers;
using Serilog;
using Serilog.Core;
using System;
using System.Collections.Generic;
using System.Configuration;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

namespace DOLE.HRIS.Application.Automation.Selenium
{
    [TestFixture]
    [Category("Aulas")]
    public class TC001FiltrosCentrosEntrenamientoTest
    {
        private readonly string urlEntorno = Environment.GetEnvironmentVariable("UrlApplicationForTesting", EnvironmentVariableTarget.Process);
        private readonly SeleniumEntity seleniumEntities = new SeleniumEntity("CF001", "CF001_CentroaFiltrar");
        private string urlTest = "";
        private readonly string urlScreen = "/Training/Maintenances/TrainingCenters.aspx";


        private IWebDriver driver;
        public IDictionary<string, object> vars { get; private set; }
        private IJavaScriptExecutor js;
        WebDriverWait wait;
        Commons myCommons;

        [SetUp]
        public void SetUp()
        {
            urlTest = !string.IsNullOrEmpty(urlEntorno) ? urlEntorno : ConfigurationManager.AppSettings.Get("UrlApplicationForTesting");
            // Inicializa el driver de Edge
            driver = new EdgeDriver();
            myCommons = new Commons();
            wait = new WebDriverWait(driver, TimeSpan.FromSeconds(70));

            driver.Manage().Window.Maximize();
            // Inicializa el ejecutor de JavaScript y el diccionario de variables
            js = (IJavaScriptExecutor)driver;
            vars = new Dictionary<string, object>();
            myCommons.log();
        }
        [TearDown]
        protected void TearDown()
        {
            if (TestContext.CurrentContext.Result.Outcome.Status == TestStatus.Failed)
            {
                myCommons.TakeScreenshot(driver, TestContext.CurrentContext.Test.Name);
            }

            driver.Quit();
        }

        [Test]
        public async Task TC001FiltrosCentrosEntrenamiento()
        {

            await myCommons.SeleniumSetup(wait, driver, urlTest, urlScreen);
            Thread.Sleep(1500);
            wait.Until(ExpectedConditions.ElementIsVisible(By.Id("ctl00_cntBody_btnAdd")));

            wait.Until(ExpectedConditions.ElementToBeClickable(By.Id("ctl00_cntBody_btnAdd"))).Click();
            myCommons.Log.Information($"{DateTime.Now}: Esperando que el botón de Aceptar se muestre.");

            // Realiza acciones con el elemento <body>
            {
                var bodyElement = wait.Until(ExpectedConditions.ElementIsVisible(By.TagName("body")));
                Actions builder = new Actions(driver);
                builder.MoveToElement(bodyElement, 0, 0).Perform();
            }


            myCommons.Log.Information($"{DateTime.Now}: Ingresando a la modal de Creación de Centros.");
            myCommons.AgregarCentro(wait, driver, js, new List<SeleniumEntity> { seleniumEntities });

            wait.Until(ExpectedConditions.ElementIsVisible(By.Id("ctl00_cntBody_txtTrainingCenterCodeFilter")));
            Utilities.CleanFields(js, "ctl00_cntBody_txtTrainingCenterCodeFilter");
            Utilities.CleanFields(js, "ctl00_cntBody_txtTrainingCenterDescriptionFilter");

            wait.Until(ExpectedConditions.ElementToBeClickable(By.Id("ctl00_cntBody_txtTrainingCenterCodeFilter"))).Click();

            driver.FindElement(By.Id("ctl00_cntBody_txtTrainingCenterCodeFilter")).SendKeys(seleniumEntities.Code);
            myCommons.Log.Information($"{DateTime.Now}: Digitando valor a buscar en el filtro txtClassroomCodeFilter.  {seleniumEntities.Code}");

            driver.FindElement(By.Id("ctl00_cntBody_btnSearch")).Click();
            myCommons.Log.Information($"Click en el botón de Buscar");

            Thread.Sleep(1500);
            //Espera que el elemento en el grid sea visble
   
            // Espera para ver si se actualiza
          
            wait.Until(ExpectedConditions.ElementIsVisible(By.Id("dvTrainingCenterCode")));

            
            var trainingCodeText = wait.Until(drv =>
            {
                var el = drv.FindElement(By.Id("dvTrainingCenterCode"));
                return el.Displayed ? el.Text : null;
            });

            // 2. Usa la propiedad correcta en lugar de “expected”
            Assert.AreEqual(seleniumEntities.Code, trainingCodeText, "El código del centro no coincide.");

            myCommons.Log.Information($"Código del centro recuperado después de la búsqueda: {trainingCodeText}");

            // Esperar a que desaparezca y vuelva a aparecer el contenedor de resultados para asegurarse de que está actualizado
            wait.Until(ExpectedConditions.InvisibilityOfElementLocated(By.Id("dvLoadingGrid"))); // si hay loader
            wait.Until(ExpectedConditions.ElementIsVisible(By.Id("dvTrainingCenterDescription")));



            var trainingDescriptionText = wait.Until(drv =>
            {
                var el = drv.FindElement(By.Id("dvTrainingCenterDescription"));
                return el.Displayed ? el.Text : null;
            });
            Assert.AreEqual(seleniumEntities.Description, trainingDescriptionText, "La descripción no coincide.");

            //var trainingDescriptionText = wait.Until(drir => driver.FindElement(By.Id("dvTrainingCenterDescription"))).Text;
            //Assert.AreEqual(seleniumEntities.Description, trainingDescriptionText);
            myCommons.Log.Information($"Decripción del centro recuperado después de la búsqueda: {trainingDescriptionText}");


            var locationText = wait.Until(drv =>
            {
                var el = drv.FindElement(By.Id("dvPlaceLocation"));
                return el.Displayed ? el.Text : null;
            });
            Assert.AreEqual("Interno", locationText, "El lugar del centro no coincide.");


       
            myCommons.Log.Information($"Lugar del centro recuperada: {locationText}");


            wait.Until(ExpectedConditions.ElementIsVisible(By.Id("ctl00_cntBody_txtTrainingCenterCodeFilter")));
            Utilities.CleanFields(js, "ctl00_cntBody_txtTrainingCenterCodeFilter");
            Utilities.CleanFields(js, "ctl00_cntBody_txtTrainingCenterDescriptionFilter");

            wait.Until(ExpectedConditions.ElementToBeClickable(By.Id("ctl00_cntBody_txtTrainingCenterDescriptionFilter")));
            driver.FindElement(By.Id("ctl00_cntBody_txtTrainingCenterDescriptionFilter")).SendKeys(seleniumEntities.Description);

            myCommons.Log.Information($"{DateTime.Now}: Digitando valor a buscar en el filtro ctl00_cntBody_txtTrainingCenterDescriptionFilter.  {seleniumEntities.Code}");

            wait.Until(ExpectedConditions.ElementIsVisible(By.Id("ctl00_cntBody_btnSearch")));
            driver.FindElement(By.Id("ctl00_cntBody_btnSearch")).Click();
            myCommons.Log.Information($"Click en el botón de Buscar");

            //Espera que el elemento en el grid sea visble
            Thread.Sleep(1000);

            wait.Until(ExpectedConditions.ElementIsVisible(By.Id("dvTrainingCenterDescription")));

            wait.Until(d =>
            {
                var element = d.FindElement(By.Id("dvTrainingCenterDescription"));
                return element.Displayed && element.Text == seleniumEntities.Description;
            });




             trainingDescriptionText = wait.Until(drv =>
            {
                var el = drv.FindElement(By.Id("dvTrainingCenterDescription"));
                return el.Displayed ? el.Text : null;
            });
            Assert.AreEqual(seleniumEntities.Description, trainingDescriptionText, "La descripción no coincide.");

            //var updatedDescriptionText = wait.Until(driver => driver.FindElement(By.Id("dvTrainingCenterDescription"))).Text;
            //Assert.AreEqual(seleniumEntities.Description, updatedDescriptionText);
            myCommons.Log.Information($"Decripción del centro recuperado después de la búsqueda: {trainingDescriptionText}");



            // Thread.Sleep(1000);
            wait.Until(ExpectedConditions.ElementIsVisible(By.Id("ctl00_cntBody_txtTrainingCenterCodeFilter")));

            Utilities.CleanFields(js, "ctl00_cntBody_txtTrainingCenterCodeFilter");
            Utilities.CleanFields(js, "ctl00_cntBody_txtTrainingCenterDescriptionFilter");
            driver.FindElement(By.Id("ctl00_cntBody_cboPlaceLocationFilter")).Click();
            {
                var dropdown = driver.FindElement(By.Id("ctl00_cntBody_cboPlaceLocationFilter"));
                dropdown.FindElement(By.XPath("//option[. = 'Interno']")).Click();
            }

            wait.Until(ExpectedConditions.ElementToBeClickable(By.Id("ctl00_cntBody_txtTrainingCenterCodeFilter"))).Click();

            driver.FindElement(By.Id("ctl00_cntBody_txtTrainingCenterCodeFilter")).SendKeys(seleniumEntities.Code);

            driver.FindElement(By.Id("ctl00_cntBody_btnSearch")).Click();

            wait.Until(ExpectedConditions.ElementIsVisible(By.Id("dvPlaceLocation")));
            //locationText = wait.Until(drver => driver.FindElement(By.Id("dvPlaceLocation"))).Text; 
            locationText = wait.Until(driver =>
            {
                try
                {
                    var element = driver.FindElement(By.Id("dvPlaceLocation"));
                    return element.Displayed ? element.Text : null;
                }
                catch (StaleElementReferenceException)
                {
                    // Reintenta una vez si el DOM se reconstruyó
                    var element = driver.FindElement(By.Id("dvPlaceLocation"));
                    return element.Displayed ? element.Text : null;
                }
            });

            Assert.AreEqual("Interno", locationText);
            myCommons.Log.Information($"Lugar del centro recuperada: {locationText}");

        }

       
    }
}