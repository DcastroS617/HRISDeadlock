// Generated by Selenium IDE
using DOLE.HRIS.NUnit.Test;
using DOLE.HRIS.NUnit.Test.Utilities;
using NUnit.Framework;
using NUnit.Framework.Interfaces;
using OpenQA.Selenium;
using OpenQA.Selenium.Edge;
using OpenQA.Selenium.Support.UI;
using SeleniumExtras.WaitHelpers;
using Serilog;
using Serilog.Core;
using System;
using System.Collections.Generic;
using System.Configuration;
using System.Net;
using System.Net.Http;
using System.Runtime.InteropServices;
using System.Text.RegularExpressions;
using System.Threading;
using System.Threading.Tasks;
namespace DOLE.HRIS.Application.Automation.Selenium
{
    [TestFixture]
    [Category("Aulas")]
    public class TC003EditarCaracteresEspecialesCentrosEntrenamientoTest
    {
        private readonly string urlEntorno = Environment.GetEnvironmentVariable("UrlApplicationForTesting", EnvironmentVariableTarget.Process);
        private string urlTest = "";
        private readonly string urlScreen = "/Training/Maintenances/TrainingCenters.aspx";

        // private readonly SeleniumEntity seleniumEntitiesEdited = new SeleniumEntity("CEC001 ", @"Ascript/>test!@#$%^*()__++{}: <>?< script />  ;:,.[L¨P¨P*ñ{09987:Ñ[*?P>.><<!@#$%^&*(("); 
        private readonly SeleniumEntity seleniumEntitiesEdited = new SeleniumEntity("@\"script/>test!@#$%^*()__++{}: <>?< ", @"""Escripttest@__:script:LPPñ09987:ÑP@__:s?@%#$%^*()__++{}:*{:[*?>.><<!#$%^&*((");

        private readonly List<SeleniumEntity> seleniumEntities = new List<SeleniumEntity>();


        private IWebDriver driver;
        WebDriverWait wait;
        public IDictionary<string, object> vars { get; private set; }
        private IJavaScriptExecutor js;

        Commons myCommons;
        int cantidad;


        [SetUp]
        public void SetUp()
        {
            urlTest = !string.IsNullOrEmpty(urlEntorno) ? urlEntorno : ConfigurationManager.AppSettings.Get("UrlApplicationForTesting");
            driver = new EdgeDriver();
            driver.Manage().Window.Maximize();
            myCommons = new Commons();
            myCommons.log();
            wait = new WebDriverWait(driver, TimeSpan.FromSeconds(30));

            seleniumEntities.Add(new SeleniumEntity("CEC001", "CEC001_EditarCaracteres"));





            // Inicializa el ejecutor de JavaScript y el diccionario de variables
            js = (IJavaScriptExecutor)driver;
            vars = new Dictionary<string, object>();
        }

        [TearDown]
        protected void TearDown()
        {
            if (TestContext.CurrentContext.Result.Outcome.Status == TestStatus.Failed)
            {
                myCommons.TakeScreenshot(driver, TestContext.CurrentContext.Test.Name);
            }

            driver.Quit();
        }

        [Test]
        public async Task TC003EditarCaracteresEspecialesCentrosEntrenamiento()
        {
            await myCommons.SeleniumSetup(wait, driver, urlTest, urlScreen);

            Thread.Sleep(1000);

            wait.Until(ExpectedConditions.ElementToBeClickable(By.Id("ctl00_cntBody_btnAdd"))).Click();
            myCommons.Log.Information($"{DateTime.Now}: Ingresando a la modal de Creación de Centros.");

            //Los pasos para completar el formulario de creación de una aula
            //AgregarDatosCentros(seleniumEntities);
            myCommons.AddTrainginCenters(wait, driver, js, seleniumEntities);
            myCommons.Log.Information($"{DateTime.Now}: Centro creado Exitosamente.");

            //Permite buscar los centros
            myCommons.BuscarCentros(wait, driver, js, seleniumEntities[0].Code);
            //Thread.Sleep(1000);

            wait = new WebDriverWait(driver, TimeSpan.FromSeconds(20));

            //EditarDatosConCaracteres();
            myCommons.EditDataWithCharacters(wait, driver, js, seleniumEntities);
            //Iniciar con los asserts
            wait.Until(ExpectedConditions.ElementIsVisible(By.Id("ctl00_cntBody_txtTrainingCenterCodeFilter")));
            Utilities.CleanFields(js, "ctl00_cntBody_txtTrainingCenterCodeFilter");
            driver.FindElement(By.Id("ctl00_cntBody_txtTrainingCenterCodeFilter")).SendKeys(seleniumEntities[0].Code);

            driver.FindElement(By.Id("ctl00_cntBody_btnSearch")).Click();
            myCommons.Log.Information($"{DateTime.Now}: Buscar el Código del Centro " + seleniumEntities[0].Code);


            Thread.Sleep(3000);
            wait.Until(ExpectedConditions.ElementIsVisible(By.Id("dvTrainingCenterCode")));
            string displayedCode = driver.FindElement(By.Id("dvTrainingCenterCode")).Text;
            Thread.Sleep(1000);
            Assert.AreEqual(seleniumEntities[0].Code, displayedCode, "La código del centro no coincide.");
            Thread.Sleep(500);
            myCommons.Log.Information($"{DateTime.Now}: Validando el Assert en el campo de Código  " + seleniumEntities[0].Code);


            string displayedDescription = driver.FindElement(By.Id("dvTrainingCenterDescription")).Text;
            Assert.AreEqual("Escripttest@__:script:LPPñ09987:ÑP@__:script:.LPPñ:ÑP", displayedDescription, "La descripción del centro no coincide.");
            myCommons.Log.Information($"{DateTime.Now}: Validando el Assert en el campo de Descripción  " + displayedDescription);


            string displayedPlaceLocation = driver.FindElement(By.Id("dvPlaceLocation")).Text;
            Assert.AreEqual("Interno", displayedPlaceLocation, "El lugar centro de capacitación no coincide.");
            myCommons.Log.Information($"{DateTime.Now}: Validando el Assert para el Lugar del  Centro de Capacitación   " + displayedPlaceLocation);

            driver.Manage().Timeouts().ImplicitWait = TimeSpan.FromSeconds(10);
        }

       
    }
}