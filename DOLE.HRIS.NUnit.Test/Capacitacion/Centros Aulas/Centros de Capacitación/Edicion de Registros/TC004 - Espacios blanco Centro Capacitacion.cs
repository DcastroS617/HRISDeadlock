// Generated by Selenium IDE
using DOLE.HRIS.NUnit.Test;
using DOLE.HRIS.NUnit.Test.Utilities;
using NUnit.Framework;
using NUnit.Framework.Interfaces;
using OpenQA.Selenium;
using OpenQA.Selenium.Edge;
using OpenQA.Selenium.Support.UI;
using SeleniumExtras.WaitHelpers;
using Serilog;
using Serilog.Core;
using System;
using System.Collections.Generic;
using System.Configuration;
using System.Net;
using System.Net.Http;
using System.Runtime.InteropServices;
using System.Text.RegularExpressions;
using System.Threading;
using System.Threading.Tasks;

namespace DOLE.HRIS.Application.Automation.Selenium
{
    [TestFixture]
    [Category("Aulas")]
    public class TC003EspaciosBlancosEscuelaEntrenamientoTest
    {
     
        private readonly string urlEntorno = Environment.GetEnvironmentVariable("UrlApplicationForTesting", EnvironmentVariableTarget.Process);
        private string urlTest = "";

        private readonly List<SeleniumEntity> seleniumEntities = new List<SeleniumEntity>();

        private readonly SeleniumEntity seleniumEntitiesEmpty = new SeleniumEntity("CCE001", "   ");

        private readonly string urlScreen = "/Training/Maintenances/TrainingCenters.aspx";

        private IWebDriver driver;
        WebDriverWait wait;
        public IDictionary<string, object> vars { get; private set; }
        private IJavaScriptExecutor js;

        Commons myCommons;
        string expectedErrorMessage = "Por favor verifique los campos marcados en el formulario, corrija los errores e intente nuevamente.";


        [SetUp]
        public void SetUp()
        {
            urlTest = !string.IsNullOrEmpty(urlEntorno) ? urlEntorno : ConfigurationManager.AppSettings.Get("UrlApplicationForTesting");
            driver = new EdgeDriver();
            driver.Manage().Window.Maximize();
            myCommons = new Commons();
            myCommons.log();
            wait = new WebDriverWait(driver, TimeSpan.FromSeconds(30));

            seleniumEntities.Add(new SeleniumEntity("CCE001", "CCE001_EditarConEmpty"));





            // Inicializa el ejecutor de JavaScript y el diccionario de variables
            js = (IJavaScriptExecutor)driver;
            vars = new Dictionary<string, object>();
        }

        [TearDown]
        protected void TearDown()
        {
            if (TestContext.CurrentContext.Result.Outcome.Status == TestStatus.Failed)
            {
                myCommons.TakeScreenshot(driver, TestContext.CurrentContext.Test.Name);
            }

            driver.Quit();
        }

        [Test]
        public async Task TC003EspaciosBlancosEscuelaEntrenamiento()
        {
            await myCommons.SeleniumSetup(wait, driver, urlTest, urlScreen);
            Thread.Sleep(1000);

            wait.Until(ExpectedConditions.ElementToBeClickable(By.Id("ctl00_cntBody_btnAdd"))).Click();
            myCommons.Log.Information($"{DateTime.Now}: Ingresando a la modal de Creación de Centros.");

            AgregarDatosCentros(seleniumEntities);
            myCommons.Log.Information($"{DateTime.Now}: Centro creado Exitosamente.");

            //Permite buscar los centros
            myCommons.BuscarCentros(wait, driver, js, seleniumEntities[0].Code);
            //Thread.Sleep(1000);

            //driver.FindElement(By.Id("ctl00_cntBody_txtTrainingCenterCodeFilter")).SendKeys(seleniumEntities.Code);
            wait = new WebDriverWait(driver, TimeSpan.FromSeconds(20));

            DefaultWait<IWebDriver> fluentWait = new DefaultWait<IWebDriver>(driver)
            {
                Timeout = TimeSpan.FromSeconds(10),  // Tiempo máximo de espera
                PollingInterval = TimeSpan.FromMilliseconds(500)  // Cada cuánto revisa la condición
            };
            fluentWait.IgnoreExceptionTypes(typeof(StaleElementReferenceException));  // Ignora errores de referencia obsoleta

            Thread.Sleep(1000);

            IWebElement element = fluentWait.Until(drv => drv.FindElement(By.Id("dvTrainingCenterCode")));
            wait.Until(ExpectedConditions.ElementToBeClickable(By.Id("dvTrainingCenterCode"))).Click();
            myCommons.Log.Information($"{DateTime.Now}: Buscar el Código del Centro " + seleniumEntities[0].Code);




            Thread.Sleep(1000);
            driver.FindElement(By.Id("ctl00_cntBody_btnEdit")).Click();
            myCommons.Log.Information($"{DateTime.Now}: Click en el botón de Editar ");

            wait.Until(ExpectedConditions.ElementIsVisible(By.Id("ctl00_cntBody_txtTrainingCenterDescription")));
            driver.FindElement(By.Id("ctl00_cntBody_txtTrainingCenterDescription")).Click();
            Utilities.CleanFields(js, "ctl00_cntBody_txtTrainingCenterDescription");
            driver.FindElement(By.Id("ctl00_cntBody_txtTrainingCenterDescription")).SendKeys(seleniumEntitiesEmpty.Description);
            myCommons.Log.Information($"{DateTime.Now}: Buscar el Código del Centro " + seleniumEntitiesEmpty.Description);

            IWebElement fieldElement = driver.FindElement(By.Id("ctl00_cntBody_cboPlaceLocation"));
            Utilities.SelectOptionByDropDownList(js, fieldElement, "Interno");
            myCommons.Log.Information($"{DateTime.Now}: Lugar disponible " + "Interno");


            driver.FindElement(By.CssSelector("#ctl00_cntBody_uppDialogControl .form-horizontal")).Click();
            driver.FindElement(By.CssSelector(".col-sm-8 .active")).Click();
            myCommons.Log.Information($"{DateTime.Now}: Click en check de Habilitado");

            driver.FindElement(By.Id("ctl00_cntBody_btnAccept")).Click();
            myCommons.Log.Information($"{DateTime.Now}: Click en el botón de Aceptar para Editar ");

            wait = new WebDriverWait(driver, TimeSpan.FromSeconds(20));
            wait.Until(ExpectedConditions.ElementIsVisible(By.CssSelector("h3[class='panel-title text-center']")));

            string errorMessage = driver.FindElement(By.CssSelector("div[class='panel-body text-center']")).Text;

            Assert.AreEqual(expectedErrorMessage, errorMessage, "Error Message Incorrecto.");
            myCommons.Log.Information($"{DateTime.Now}:Validando el Assert con el mensaje:  " + errorMessage);



         
        }

        public void AgregarDatosCentros(List<SeleniumEntity> seleniumEntities)
        {

            Serilog.Log.Information($"{DateTime.Now}: Ingresando modal de creación de Centros");
            IWebElement fieldElement = wait.Until(ExpectedConditions.ElementIsVisible(By.Id("ctl00_cntBody_txtTrainingCenterCode")));
            driver.FindElement(By.Id("ctl00_cntBody_txtTrainingCenterCode")).SendKeys(seleniumEntities[0].Code);
            Serilog.Log.Information($"{DateTime.Now}: Ingresando el código del Centro " + seleniumEntities[0].Code);


            driver.FindElement(By.Id("ctl00_cntBody_txtTrainingCenterDescription")).Click();
            driver.FindElement(By.Id("ctl00_cntBody_txtTrainingCenterDescription")).SendKeys(seleniumEntities[0].Description);
            Serilog.Log.Information($"{DateTime.Now}: Ingresando la descripción del centro " + seleniumEntities[0].Description);

            wait = new WebDriverWait(driver, TimeSpan.FromSeconds(10));
            //IWebElement fieldElement = driver.FindElement(By.Id("ctl00_cntBody_cboPlaceLocation"));           
            //Utilities.SelectOptionByDropDownList(js, fieldElement, "Internal");
            var locationDropdown = new SelectElement(wait.Until(ExpectedConditions.ElementIsVisible(By.Id("ctl00_cntBody_cboPlaceLocation"))));
            locationDropdown.SelectByText("Interno");
            Serilog.Log.Information($"{DateTime.Now}: Seleccionando Lugar" + "Interno");


            driver.FindElement(By.CssSelector("#ctl00_cntBody_uppDialogControl .form-horizontal")).Click();
            driver.FindElement(By.CssSelector(".col-sm-8 .active")).Click();
            Serilog.Log.Information($"{DateTime.Now}: Seleccionando la opción de Habilitado con SI");



            driver.FindElement(By.Id("ctl00_cntBody_btnAccept")).Click();
            Serilog.Log.Information($"{DateTime.Now}:Clcik en en boton de Aceptar para guardar el registro");



            wait.Until(ExpectedConditions.ElementIsVisible(By.CssSelector("div.alert.alert-autocloseable-msg.alert-success")));
            var alert = driver.FindElements(By.CssSelector("div.alert.alert-autocloseable-msg.alert-success"));
            if (alert.Count > 0)
            {
                wait.Until(ExpectedConditions.ElementIsVisible(By.CssSelector("div.alert.alert-autocloseable-msg.alert-success")));
            }
            else
            {
                myCommons.Log.Information("No se encontró la alerta de éxito");
            }
            wait.Until(ExpectedConditions.InvisibilityOfElementLocated(By.CssSelector("div.alert.alert-autocloseable-msg.alert-success")));

            Thread.Sleep(1500);
        }
    }
}