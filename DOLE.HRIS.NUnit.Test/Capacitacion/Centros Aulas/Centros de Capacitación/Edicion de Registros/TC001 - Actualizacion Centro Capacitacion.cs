// Generated by Selenium IDE
using DOLE.HRIS.NUnit.Test;
using DOLE.HRIS.NUnit.Test.Utilities;
using NUnit.Framework;
using NUnit.Framework.Interfaces;
using OpenQA.Selenium;
using OpenQA.Selenium.Edge;
using OpenQA.Selenium.Support.UI;
using SeleniumExtras.WaitHelpers;
using System;
using System.Collections.Generic;
using System.Configuration;
using System.Threading;
using System.Threading.Tasks;

namespace DOLE.HRIS.Application.Automation.Selenium
{
    [TestFixture]
    [Category("Aulas")]
    public class TC001ActualizacionCentrosEntrenamientoTest
    {
        private readonly string urlEntorno = Environment.GetEnvironmentVariable("UrlApplicationForTesting", EnvironmentVariableTarget.Process);
        private string urlTest = "";
        private readonly List<SeleniumEntity> seleniumEntities = new List<SeleniumEntity>();
        private readonly List<SeleniumEntity> seleniumEntitiesEdited = new List<SeleniumEntity>();

        private readonly string urlScreen = "/Training/Maintenances/TrainingCenters.aspx";

        private IWebDriver driver;
        public IDictionary<string, object> vars { get; private set; }
        private IJavaScriptExecutor js;
        WebDriverWait wait;
        Commons myCommons;

        [SetUp]
        public void SetUp()
        {
            urlTest = !string.IsNullOrEmpty(urlEntorno) ? urlEntorno : ConfigurationManager.AppSettings.Get("UrlApplicationForTesting");

            driver = new EdgeDriver();
            myCommons = new Commons();
            myCommons.log();

            wait = new WebDriverWait(driver, TimeSpan.FromSeconds(90));
            js = (IJavaScriptExecutor)driver;
            driver.Manage().Window.Maximize();

            vars = new Dictionary<string, object>();

            seleniumEntities.Add(new SeleniumEntity("CEU001", "CEU001_Center1"));
            seleniumEntities.Add(new SeleniumEntity("CEU002", "CEU001_Center2"));

            seleniumEntitiesEdited.Add(new SeleniumEntity("CEU001", "CEU001_Update001"));
            seleniumEntitiesEdited.Add(new SeleniumEntity("CEU002", "CEU001_Update002"));

        }

        [TearDown]
        protected void TearDown()
        {
            if (TestContext.CurrentContext.Result.Outcome.Status == TestStatus.Failed)
            {
                myCommons.TakeScreenshot(driver, TestContext.CurrentContext.Test.Name);
            }

            driver.Quit();
        }

        [Test]
        public async Task TC001ActualizacionCentrosEntrenamiento()
        {
            await myCommons.SeleniumSetup(wait, driver, urlTest, urlScreen);

            for (int i = 0; i < 2; i++)
            {
                Thread.Sleep(3000);

                wait.Until(ExpectedConditions.ElementToBeClickable(By.Id("ctl00_cntBody_btnAdd"))).Click();

                myCommons.Log.Information($"{DateTime.Now}: Ingresando a la modal de Creación de Centros.");

                //Los pasos para completar el formulario de creación de una aula
                myCommons.AgregarDatosCentros(wait, driver, js, i, seleniumEntities);
                myCommons.Log.Information($"{DateTime.Now}: Agregando Datos.");


                wait.Until(ExpectedConditions.ElementIsVisible((By.Id("ctl00_cntBody_txtTrainingCenterCodeFilter"))));
                Utilities.CleanFields(js, "ctl00_cntBody_txtTrainingCenterCodeFilter");
                driver.FindElement(By.Id("ctl00_cntBody_txtTrainingCenterCodeFilter")).SendKeys(seleniumEntities[i].Code);


                wait.Until(ExpectedConditions.ElementIsVisible((By.Id("ctl00_cntBody_btnSearch"))));
                driver.FindElement(By.Id("ctl00_cntBody_btnSearch")).Click();

                Thread.Sleep(1000);

                DefaultWait<IWebDriver> fluentWait = new DefaultWait<IWebDriver>(driver)
                {
                    Timeout = TimeSpan.FromSeconds(10),  // Tiempo máximo de espera
                    PollingInterval = TimeSpan.FromMilliseconds(500)  // Cada cuánto revisa la condición
                };
                fluentWait.IgnoreExceptionTypes(typeof(StaleElementReferenceException));  // Ignora errores de referencia obsoleta

                IWebElement element = fluentWait.Until(drv => drv.FindElement(By.Id("dvTrainingCenterCode")));
                wait.Until(ExpectedConditions.ElementToBeClickable(By.Id("dvTrainingCenterCode"))).Click();
                myCommons.Log.Information($"{DateTime.Now}: Esperando el elemento en el grid .  " + element);

                Thread.Sleep(1000);

                //wait.Until(ExpectedConditions.ElementIsVisible((By.Id("ctl00_cntBody_btnEdit"))));
                //driver.FindElement(By.Id("ctl00_cntBody_btnEdit")).Click();
                Thread.Sleep(1500);
                var ButtonElement = driver.FindElement(By.Id("ctl00_cntBody_btnEdit"));
                IWebElement fieldElement = wait.Until(ExpectedConditions.ElementIsVisible(By.Id("ctl00_cntBody_btnEdit")));
                wait.Until(ExpectedConditions.ElementToBeClickable((ButtonElement))).Click();
                myCommons.Log.Information($"{DateTime.Now}: Ingresando en la modal de Edición");
                Thread.Sleep(10000);

                myCommons.UpdateCenters(wait, driver, js, i, seleniumEntitiesEdited);

                wait.Until(ExpectedConditions.ElementIsVisible((By.Id("ctl00_cntBody_txtTrainingCenterCodeFilter"))));

                myCommons.BuscarCentros(wait, driver, js, seleniumEntities[i].Code);
                myCommons.Log.Information($"{DateTime.Now}: Buscar el Centro modificado   " + seleniumEntities[i].Code);

                wait.Until(ExpectedConditions.ElementIsVisible(By.Id("dvTrainingCenterCode")));
                myCommons.Log.Information($"{DateTime.Now}: Buscando el Centro creado  " + seleniumEntities[i].Code);

                // Los asserts validan que el test case, realmente inserto las aulas
                string displayedCode = driver.FindElement(By.Id("dvTrainingCenterCode")).Text;
                Assert.AreEqual(seleniumEntities[i].Code, displayedCode, "La código del centro no coincide.");
                myCommons.Log.Information($"{DateTime.Now}: Validando el Assert por Código del Centro  " + seleniumEntities[i].Code);

                string displayedDescription = driver.FindElement(By.Id("dvTrainingCenterDescription")).Text;
                Assert.AreEqual(seleniumEntitiesEdited[i].Description, displayedDescription, "La descripción del Centro no coincide.");
                myCommons.Log.Information($"{DateTime.Now}: Validando el Assert por Descripción del Centro de capacitación  " + seleniumEntities[i].Description);

                string displayedPlaceLocation = driver.FindElement(By.Id("dvPlaceLocation")).Text;
                Assert.AreEqual("Interno", displayedPlaceLocation, "El lugar centro de capacitación no coincide.");
                myCommons.Log.Information($"{DateTime.Now}: Validando el Assert para el Lugar del  Centro de Capacitación   " + displayedPlaceLocation);

            }
        }

      
    }
}