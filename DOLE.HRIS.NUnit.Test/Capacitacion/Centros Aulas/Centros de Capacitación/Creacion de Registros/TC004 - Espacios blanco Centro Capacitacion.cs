// Generated by Selenium IDE
using DOLE.HRIS.NUnit.Test;
using DOLE.HRIS.NUnit.Test.Utilities;
using NUnit.Framework;
using NUnit.Framework.Interfaces;
using OpenQA.Selenium;
using OpenQA.Selenium.Edge;
using OpenQA.Selenium.Interactions;
using OpenQA.Selenium.Support.UI;
using SeleniumExtras.WaitHelpers;
using System;
using System.Collections.Generic;
using System.Configuration;
using System.Threading;
using System.Threading.Tasks;

namespace DOLE.HRIS.Application.Automation.Selenium
{
    [TestFixture]
    [Category("Aulas")]
    public class TC003EspaciosBlancosCentrosEntrenamientoTest
    {

        private readonly string urlEntorno = Environment.GetEnvironmentVariable("UrlApplicationForTesting", EnvironmentVariableTarget.Process);
        private string urlTest = "";
        private readonly string urlScreen = "/Training/Maintenances/TrainingCenters.aspx";

        private readonly SeleniumEntity seleniumEntities = new SeleniumEntity("", "");

        private readonly List<SeleniumEntity> seleniumEntitiesCreate = new List<SeleniumEntity>();


        private IWebDriver driver;
        public IDictionary<string, object> vars { get; private set; }
        private IJavaScriptExecutor js;
        WebDriverWait wait;
        Commons myCommons;


        string expectedErrorMessage = "Por favor verifique los campos marcados en el formulario, corrija los errores e intente nuevamente.";
        //Actions actions;

        [SetUp]
        public void SetUp()
        {
            urlTest = !string.IsNullOrEmpty(urlEntorno) ? urlEntorno : ConfigurationManager.AppSettings.Get("UrlApplicationForTesting");
            driver = new EdgeDriver();
            driver.Manage().Window.Maximize();
            myCommons = new Commons();
            myCommons.log();

            wait = new WebDriverWait(driver, TimeSpan.FromSeconds(60));

            js = (IJavaScriptExecutor)driver;
            vars = new Dictionary<string, object>();

            seleniumEntitiesCreate.Add(new SeleniumEntity("CVU001", "CV001_EspaciosVacios"));
        }

        [TearDown]
        protected void TearDown()
        {
            if (TestContext.CurrentContext.Result.Outcome.Status == TestStatus.Failed)
            {
                myCommons.TakeScreenshot(driver, TestContext.CurrentContext.Test.Name);
            }

            driver.Quit();
        }

        [Test]
        public async Task TC003EspaciosBlancosCentrosEntrenamiento()
        {
            await myCommons.SeleniumSetup(wait, driver, urlTest, urlScreen);

            //Thread.Sleep(3000);
            wait.Until(ExpectedConditions.ElementIsVisible(By.Id("ctl00_cntBody_btnAdd")));

            wait.Until(ExpectedConditions.ElementToBeClickable(By.Id("ctl00_cntBody_btnAdd"))).Click();

            {
                var element = driver.FindElement(By.XPath("//button[@id='ctl00_cntBody_btnAdd']"));
                Actions builder = new Actions(driver);
                builder.MoveToElement(element).Perform();
            }
            {
                var element = driver.FindElement(By.TagName("body"));
                Actions builder = new Actions(driver);
                builder.MoveToElement(element, 0, 0).Perform();
            }
            myCommons.Log.Information($"{DateTime.Now}: Ingresando a la modal de Creaci贸n de Centros.");


            wait.Until(ExpectedConditions.ElementIsVisible(By.Id("ctl00_cntBody_txtTrainingCenterCode")));
            driver.FindElement(By.Id("ctl00_cntBody_txtTrainingCenterCode")).Click();
            driver.FindElement(By.Id("ctl00_cntBody_txtTrainingCenterCode")).SendKeys(seleniumEntities.Code);
            myCommons.Log.Information($"{DateTime.Now}: Ingresando el c贸digo en blanco.  " + seleniumEntities.Code);

            wait.Until(ExpectedConditions.ElementIsVisible(By.Id("ctl00_cntBody_txtTrainingCenterDescription")));
            driver.FindElement(By.Id("ctl00_cntBody_txtTrainingCenterDescription")).Click();
            driver.FindElement(By.Id("ctl00_cntBody_txtTrainingCenterDescription")).SendKeys(seleniumEntities.Description);
            myCommons.Log.Information($"{DateTime.Now}: Ingresando la Descripci贸n en blanco .  " + seleniumEntities.Description);


            wait.Until(ExpectedConditions.ElementIsVisible(By.Id("ctl00_cntBody_cboPlaceLocation")));
            IWebElement fieldElement = driver.FindElement(By.Id("ctl00_cntBody_cboPlaceLocation"));
            Utilities.SelectOptionByDropDownList(js, fieldElement, "");
            myCommons.Log.Information($"{DateTime.Now}: Intentar ingresar blancos Lugar");

            wait.Until(ExpectedConditions.ElementIsVisible(By.CssSelector("#ctl00_cntBody_uppDialogControl .form-horizontal")));
            driver.FindElement(By.CssSelector("#ctl00_cntBody_uppDialogControl .form-horizontal")).Click();
            driver.FindElement(By.CssSelector(".col-sm-8 .active")).Click();
            myCommons.Log.Information($"{DateTime.Now}: Click habilitar registro ");


            wait.Until(ExpectedConditions.ElementIsVisible(By.Id("ctl00_cntBody_btnAccept")));

            driver.FindElement(By.Id("ctl00_cntBody_btnAccept")).Click();
            myCommons.Log.Information($"{DateTime.Now}: Click en el bot贸n de Aceptar ");


            wait.Until(ExpectedConditions.ElementIsVisible(By.CssSelector("h3[class='panel-title text-center']")));

            string errorMessage = driver.FindElement(By.CssSelector("div[class='panel-body text-center']")).Text;

            Assert.AreEqual(expectedErrorMessage, errorMessage, "Error Message Incorrecto.");
            myCommons.Log.Information($"{DateTime.Now}:Validando el Assert con el mensaje:  " + errorMessage);


            Thread.Sleep(1500);
        }
    }

}