// Generated by Selenium IDE
using DOLE.HRIS.NUnit.Test;
using DOLE.HRIS.NUnit.Test.Utilities;
using NUnit.Framework;
using NUnit.Framework.Interfaces;
using OpenQA.Selenium;
using OpenQA.Selenium.Edge;
using OpenQA.Selenium.Interactions;
using OpenQA.Selenium.Support.UI;
using SeleniumExtras.WaitHelpers;
using Serilog;
using Serilog.Core;
using System;
using System.Collections.Generic;
using System.Configuration;
using System.IO;
using System.Net;
using System.Net.Http;
using System.Net.NetworkInformation;
using System.Threading;
using System.Threading.Tasks;

namespace DOLE.HRIS.Application.Automation.Selenium
{
    [TestFixture]
    [Category("Aulas")]
    public class TC002DuplicidadCentroEntrenamientoTest
    {
        private readonly string urlEntorno = Environment.GetEnvironmentVariable("UrlApplicationForTesting", EnvironmentVariableTarget.Process);
        private string urlTest = "";

        //private readonly SeleniumEntity seleniumEntities = new SeleniumEntity("099S1", "TC001_001");
        private readonly List<SeleniumEntity> seleniumEntities = new List<SeleniumEntity>();

        private readonly string urlScreen = "/Training/Maintenances/TrainingCenters.aspx";

        string expectedErrorMessage = "Los datos ingresados provocan un conflicto con otro registro por duplicidad de código.\nLos datos del registro existente son los siguientes:";



        private IWebDriver driver;
        public IDictionary<string, object> vars { get; private set; }
        private IJavaScriptExecutor js;
        WebDriverWait wait;
        Commons myCommons;

        [SetUp]
        public void SetUp()
        {
            urlTest = !string.IsNullOrEmpty(urlEntorno) ? urlEntorno : ConfigurationManager.AppSettings.Get("UrlApplicationForTesting");
       driver = new EdgeDriver();
       myCommons = new Commons();
       myCommons.log();

            wait = new WebDriverWait(driver, TimeSpan.FromSeconds(60));


       driver.Manage().Window.Maximize();
       // Inicializa el ejecutor de JavaScript y el diccionario de variables

       js = (IJavaScriptExecutor)driver;
       vars = new Dictionary<string, object>();

            // Agrega entidades de Selenium
            seleniumEntities.Add(new SeleniumEntity("CC001", "CC001_Duplicado"));
            seleniumEntities.Add(new SeleniumEntity("CC002", "CC002_Duplicado"));
        }

        [TearDown]
        protected void TearDown()
        {
            if (TestContext.CurrentContext.Result.Outcome.Status == TestStatus.Failed)
            {
                myCommons.TakeScreenshot(driver, TestContext.CurrentContext.Test.Name);
            }

            driver.Quit();
        }

        [Test]
        public async Task TC002DuplicidadCentroEntrenamiento()
        {
           
            await myCommons.SeleniumSetup(wait, driver, urlTest, urlScreen);
          

            for (int i = 0; i < 2; i++)
            {

                wait.Until(ExpectedConditions.ElementIsVisible(By.Id("ctl00_cntBody_btnAdd")));
                 wait.Until(ExpectedConditions.ElementToBeClickable(By.Id("ctl00_cntBody_btnAdd"))).Click();
                myCommons.Log.Information($"{DateTime.Now}: Ingresando a la modal de Creación de Centros.");

                myCommons.AgregarDatosCentros(wait, driver, js, i, seleniumEntities);
                myCommons.Log.Information($"{DateTime.Now}: Digitando los datos para la creación del registro.");

                Thread.Sleep(1000);
                wait.Until(ExpectedConditions.ElementIsVisible(By.Id("ctl00_cntBody_btnAdd")));
                wait.Until(ExpectedConditions.ElementToBeClickable(By.Id("ctl00_cntBody_btnAdd"))).Click();
                myCommons.Log.Information($"{DateTime.Now}: Esperando que el botón de Aceptar se muestre e ingresando nuevamente en la creación");
                {
                    var element = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//button[contains(@id, 'btnAdd')]")));
                    Actions builder = new Actions(driver);
                    builder.MoveToElement(element).Perform();
                }

                // Realiza acciones con el elemento <body>
                {
                    var bodyElement = wait.Until(ExpectedConditions.ElementIsVisible(By.TagName("body")));
                    Actions builder = new Actions(driver);
                    builder.MoveToElement(bodyElement, 0, 0).Perform();
                }


                wait.Until(ExpectedConditions.ElementIsVisible(By.Id("ctl00_cntBody_txtTrainingCenterCode")));
                driver.FindElement(By.Id("ctl00_cntBody_txtTrainingCenterCode")).Click();
                driver.FindElement(By.Id("ctl00_cntBody_txtTrainingCenterCode")).SendKeys(seleniumEntities[i].Code);
                myCommons.Log.Information($"{DateTime.Now}:Ingresando el código  " + seleniumEntities[i].Code);

                wait.Until(ExpectedConditions.ElementIsVisible(By.Id("ctl00_cntBody_txtTrainingCenterDescription")));
                driver.FindElement(By.Id("ctl00_cntBody_txtTrainingCenterDescription")).Click();
                driver.FindElement(By.Id("ctl00_cntBody_txtTrainingCenterDescription")).SendKeys(seleniumEntities[i].Description);
                myCommons.Log.Information($"{DateTime.Now}:Ingresando la Descripción  " + seleniumEntities[i].Description);


                var locationDropdown = new SelectElement(wait.Until(ExpectedConditions.ElementIsVisible(By.Id("ctl00_cntBody_cboPlaceLocation"))));
                locationDropdown.SelectByText("Interno");
                myCommons.Log.Information($"{DateTime.Now}: Seleccionando Lugar" + "Interno");

                driver.FindElement(By.CssSelector("#ctl00_cntBody_uppDialogControl .form-horizontal")).Click();
                driver.FindElement(By.CssSelector(".col-sm-8 .active")).Click();
                driver.FindElement(By.Id("ctl00_cntBody_btnAccept")).Click();

                myCommons.Log.Information($"{DateTime.Now}: Seleccionar la opción de Habilitar registro" );

                {
                    var element = driver.FindElement(By.Id("ctl00_cntBody_btnAccept"));
                    Actions builder = new Actions(driver);
                    builder.MoveToElement(element).Perform();
                }

                wait.Until(ExpectedConditions.ElementIsVisible(By.Id("ctl00_cntBody_divDuplicatedDialogText")));
                string errorMessage = driver.FindElement(By.Id("ctl00_cntBody_divDuplicatedDialogText")).Text;
                errorMessage = errorMessage.Replace("\r", "");
                Assert.AreEqual(expectedErrorMessage, errorMessage, "El mensaje de error no coincide con el esperado.");
                myCommons.Log.Information($"{DateTime.Now}:Despliegue de modal de Registro duplicado con el mensaje " + expectedErrorMessage);


                wait.Until(ExpectedConditions.ElementIsVisible(By.Id("btnDuplicatedAccept")));

                driver.FindElement(By.Id("btnDuplicatedAccept")).Click();
                {
                   var element = driver.FindElement(By.Id("btnDuplicatedAccept"));
                    Actions builder = new Actions(driver);
                    builder.MoveToElement(element).Perform();
                    myCommons.Log.Information($"{DateTime.Now}: Click en el botón de Aceptar mensaje de Registro duplicado en la modal");


                }
                Thread.Sleep(1000);
                wait.Until(ExpectedConditions.ElementIsVisible(By.Id("btnCancel")));
                driver.FindElement(By.Id("btnCancel")).Click();
                {
                    var element = driver.FindElement(By.TagName("body"));
                    Actions builder = new Actions(driver);
                    builder.MoveToElement(element, 0, 0).Perform();
                    myCommons.Log.Information($"{DateTime.Now}: Cerrando modal de Registro Duplicado");

                }


                driver.Manage().Timeouts().ImplicitWait = TimeSpan.FromSeconds(10);

            }
        }
    }
}