// Generated by Selenium IDE
using DOLE.HRIS.NUnit.Test;
using DOLE.HRIS.NUnit.Test.Utilities;
using NUnit.Framework;
using NUnit.Framework.Interfaces;
using OpenQA.Selenium;
using OpenQA.Selenium.DevTools;
using OpenQA.Selenium.Edge;
using OpenQA.Selenium.Interactions;
using OpenQA.Selenium.Support.UI;
using SeleniumExtras.WaitHelpers;
using Serilog;
using Serilog.Core;
using System;
using System.Collections.Generic;
using System.Configuration;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

namespace DOLE.HRIS.Application.Automation.Selenium
{
    [TestFixture]
    [Category("Aulas")]
    public class TC001FiltrosAulaTest
    {
       // private readonly string urlTest = ConfigurationManager.AppSettings.Get("UrlApplicationForTesting");
        private readonly string urlEntorno = Environment.GetEnvironmentVariable("UrlApplicationForTesting", EnvironmentVariableTarget.Process);
        private string urlTest = "";
        private readonly string urlScreen = "/Training/Maintenances/Classrooms.aspx";
        private readonly List<SeleniumEntity> seleniumEntities = new List<SeleniumEntity>();



        private IWebDriver driver;
        public IDictionary<string, object> vars { get; private set; }
        private IJavaScriptExecutor js;
        WebDriverWait wait;
        Commons myCommons;
        int cantidad;
 

        [SetUp]
        public void SetUp()
        {
            urlTest = !string.IsNullOrEmpty(urlEntorno) ? urlEntorno : ConfigurationManager.AppSettings.Get("UrlApplicationForTesting");
            // Inicializa el driver de Edge
            driver = new EdgeDriver();
            myCommons = new Commons();
            wait = new WebDriverWait(driver, TimeSpan.FromSeconds(60));

            driver.Manage().Window.Maximize();
            // Inicializa el ejecutor de JavaScript y el diccionario de variables
            js = (IJavaScriptExecutor)driver;
            vars = new Dictionary<string, object>();
            myCommons.log();

            seleniumEntities.Add(new SeleniumEntity("AB001", "AB001_Buscar"));

        }



        [TearDown]
        protected void TearDown()
        {
            if (TestContext.CurrentContext.Result.Outcome.Status == TestStatus.Failed)
            {
                myCommons.TakeScreenshot(driver, TestContext.CurrentContext.Test.Name);
            }

            driver.Quit();
        }

        [Test]
        public async Task TC001FiltrosAula()
        {
            Random rnd = new Random();
         
            await myCommons.SeleniumSetup(wait, driver, urlTest, urlScreen);

           wait.Until(ExpectedConditions.ElementIsVisible(By.Id("ctl00_cntBody_btnAdd")));


          wait.Until(ExpectedConditions.ElementToBeClickable(By.Id("ctl00_cntBody_btnAdd"))).Click();
          myCommons.Log.Information($"{DateTime.Now}: Esperando que el botón de Aceptar se muestre.");
           
            // Realiza acciones con el elemento <body>
            {
                var bodyElement = wait.Until(ExpectedConditions.ElementIsVisible(By.TagName("body")));
                Actions builder = new Actions(driver);
                builder.MoveToElement(bodyElement, 0, 0).Perform();
            }


            myCommons.Log.Information($"{DateTime.Now}: Ingresando a la modal de Creación de Aulas.");
            AgregarDatosAula(cantidad, seleniumEntities);

                      
            //limpiar los filtros y luego ingresar el filtro de Códig de Aula creado
            wait.Until(ExpectedConditions.ElementIsVisible((By.Id("ctl00_cntBody_txtClassroomCodeFilter"))));
             Utilities.CleanFields(js, "ctl00_cntBody_txtClassroomCodeFilter");
             Utilities.CleanFields(js, "ctl00_cntBody_txtClassroomDescriptionFilter");
             Utilities.CleanFields(js, "ctl00_cntBody_txtMinCapacityFilter");
             Utilities.CleanFields(js, "ctl00_cntBody_txtMaxCapacityFilter");

            wait.Until(ExpectedConditions.ElementToBeClickable(By.Id("ctl00_cntBody_txtClassroomCodeFilter"))).Click();
            driver.FindElement(By.Id("ctl00_cntBody_txtClassroomCodeFilter")).SendKeys(seleniumEntities[0].Code);
            myCommons.Log.Information($"{DateTime.Now}: Digitando valor a buscar en el filtro txtClassroomCodeFilter.  {seleniumEntities[0].Code}"  );


            //Buscar el código
            wait.Until(ExpectedConditions.ElementToBeClickable(By.CssSelector("button.btn.btn-default.btnAjaxAction"))).Click();
            Thread.Sleep(2000);
          
            wait.Until(ExpectedConditions.ElementExists(By.Id("dvClassroomCode")));


            string displayedCode = wait.Until(d =>
            {
                var el = d.FindElement(By.Id("dvClassroomCode"));
                return !string.IsNullOrWhiteSpace(el.Text) ? el.Text : null;
            });

         wait.Until(ExpectedConditions.ElementIsVisible(By.Id("dvClassroomCode")));

         myCommons.Log.Information($"Código de aula recuperado después de la búsqueda: {displayedCode}");
         myCommons.Log.Information($"{DateTime.Now}: Se inicia la validación de los assert luego de filtar por ctl00_cntBody_txtClassroomCodeFilter.");

         Assert.AreEqual(seleniumEntities[0].Code, displayedCode, "La código del aula no coincide.");
         myCommons.Log.Information($"{DateTime.Now}: Validando el Assert por dvClassroomCode coincida con {seleniumEntities[0].Code}.");

            
         // Espera a que el nuevo resultado cargue
         wait.Until(ExpectedConditions.ElementIsVisible(By.Id("dvClassroomDescription")));
         wait.Until(ExpectedConditions.ElementExists(By.Id("dvClassroomDescription")));


            var trainingDescriptionText = wait.Until(drv =>
            {
                var el = drv.FindElement(By.Id("dvClassroomDescription"));
                return el.Displayed ? el.Text : null;
            });
            Assert.AreEqual(seleniumEntities[0].Description, trainingDescriptionText, "La descripción no coincide.");

            myCommons.Log.Information($"Descripción del centro recuperado después de la búsqueda: {trainingDescriptionText}");

         wait.Until(ExpectedConditions.ElementIsVisible(By.Id("dvTrainingCenterDescription")));
         string displayedTrainingCenterDescription = driver.FindElement(By.Id("dvTrainingCenterDescription")).Text;
         Assert.AreEqual("Oficinas Guápiles - Interno", displayedTrainingCenterDescription, "El código del centro de capacitación no coincide.");
         myCommons.Log.Information($"{DateTime.Now}: Validando el Assert por dvTrainingCenterDescription coincida con:  {displayedTrainingCenterDescription}");

      
         wait.Until(ExpectedConditions.ElementIsVisible(By.Id("dvCapacity")));
         Assert.AreEqual(driver.FindElement(By.Id("dvCapacity")).Text, "3", $"La cantidad no es igual, deberia ser: 3 " );
         myCommons.Log.Information($"{DateTime.Now}: Validando el Assert por dvCapacity coincida con " +  3);

          
         wait.Until(ExpectedConditions.ElementIsVisible((By.Id("ctl00_cntBody_txtClassroomCodeFilter"))));
         Utilities.CleanFields(js, "ctl00_cntBody_txtClassroomCodeFilter");
         Utilities.CleanFields(js, "ctl00_cntBody_txtClassroomDescriptionFilter");
         Utilities.CleanFields(js, "ctl00_cntBody_txtMinCapacityFilter");
         Utilities.CleanFields(js, "ctl00_cntBody_txtMaxCapacityFilter");

         wait.Until(ExpectedConditions.ElementToBeClickable(By.Id("ctl00_cntBody_txtClassroomDescriptionFilter"))).Click();

         driver.FindElement(By.Id("ctl00_cntBody_txtClassroomDescriptionFilter")).SendKeys(seleniumEntities[0].Description);
         myCommons.Log.Information($"{DateTime.Now}: Buscando por filtro txtClassroomDescriptionFilter con el valor \"AB001_Buscar\" ");


         wait.Until(ExpectedConditions.ElementToBeClickable(By.CssSelector("button.btn.btn-default.btnAjaxAction"))).Click();

         myCommons.Log.Information($"{DateTime.Now}: Se inicia la validación de los assert luego de filtar por ctl00_cntBody_txtClassroomDescriptionFilter.");
         Thread.Sleep(2000);


            // Espera a que el nuevo resultado cargue
         wait.Until(ExpectedConditions.ElementExists(By.Id("dvClassroomDescription")));

        
        trainingDescriptionText = wait.Until(drv =>
            {
                var el = drv.FindElement(By.Id("dvClassroomDescription"));
                return el.Displayed ? el.Text : null;
            });
            Assert.AreEqual(seleniumEntities[0].Description, trainingDescriptionText, "La descripción no coincide.");
            myCommons.Log.Information($"Descripción del centro recuperado después de la búsqueda: {trainingDescriptionText}");


            wait.Until(ExpectedConditions.ElementIsVisible((By.Id("ctl00_cntBody_txtClassroomCodeFilter"))));
         Utilities.CleanFields(js, "ctl00_cntBody_txtClassroomCodeFilter");
         Utilities.CleanFields(js, "ctl00_cntBody_txtClassroomDescriptionFilter");
         Utilities.CleanFields(js, "ctl00_cntBody_txtMinCapacityFilter");
         Utilities.CleanFields(js, "ctl00_cntBody_txtMaxCapacityFilter");

         wait.Until(ExpectedConditions.ElementToBeClickable(By.Id("ctl00_cntBody_txtClassroomCodeFilter"))).Click();
            driver.FindElement(By.Id("ctl00_cntBody_txtClassroomCodeFilter")).SendKeys(seleniumEntities[0].Code);

         wait.Until(ExpectedConditions.ElementToBeClickable(By.Id("ctl00_cntBody_txtMaxCapacityFilter"))).Click();
         driver.FindElement(By.Id("ctl00_cntBody_txtMaxCapacityFilter")).SendKeys("3");
         myCommons.Log.Information($"{DateTime.Now}: Digitando valor en el filtro txtMaxCapacityFilter " + 3);


         wait.Until(ExpectedConditions.ElementToBeClickable(By.CssSelector("button.btn.btn-default.btnAjaxAction"))).Click();

         Thread.Sleep(1500);
         myCommons.Log.Information($"{DateTime.Now}: Se inicia la validación de los assert luego de filtar por cctl00_cntBody_txtMaxCapacityFilter.");


         wait.Until(ExpectedConditions.ElementIsVisible(By.Id("dvCapacity")));
         Assert.AreEqual(driver.FindElement(By.Id("dvCapacity")).Text, "3", $"La cantidad no es igual, deberia ser:  3");
         myCommons.Log.Information($"{DateTime.Now}: Validando el Assert por dvCapacity  " + "3");


        
         wait.Until(ExpectedConditions.ElementIsVisible((By.Id("ctl00_cntBody_txtClassroomCodeFilter"))));
         Utilities.CleanFields(js, "ctl00_cntBody_txtMinCapacityFilter");
         Utilities.CleanFields(js, "ctl00_cntBody_txtMaxCapacityFilter");
         driver.FindElement(By.Id("ctl00_cntBody_cboTrainingCenterFilter")).Click();
          {
           var dropdown = driver.FindElement(By.Id("ctl00_cntBody_cboTrainingCenterFilter"));
           dropdown.FindElement(By.XPath("//option[. = 'Oficinas Guápiles - Interno']")).Click();
           myCommons.Log.Information($"{DateTime.Now}:Seleccionado Filtro de cntBody_cboTrainingCenterFilter  {dropdown}");
          }

         wait.Until(ExpectedConditions.ElementToBeClickable(By.CssSelector("button.btn.btn-default.btnAjaxAction"))).Click();

            Thread.Sleep(1500);

            myCommons.Log.Information($"{DateTime.Now}: Se inicia la validación de los assert luego de filtar por ctl00_cntBody_cboTrainingCenterFilter.");

         string displayeddvTrainingCenterDescription = driver.FindElement(By.Id("dvTrainingCenterDescription")).Text;
         Assert.AreEqual("Oficinas Guápiles - Interno", displayeddvTrainingCenterDescription, "El código del centro de capacitación no coincide."+ displayeddvTrainingCenterDescription);
         myCommons.Log.Information($"{DateTime.Now}:Validando Assert por el filtro  cntBody_cboTrainingCenterFilter  {displayeddvTrainingCenterDescription}");
                                             
           

        }



        private string SafeGetElementText(By locator, WebDriverWait wait)
        {
            return wait.Until(driver =>
            {
                try
                {
                    var el = driver.FindElement(locator);
                    return string.IsNullOrWhiteSpace(el.Text) ? null : el.Text;
                }
                catch (StaleElementReferenceException)
                {
                    return null;
                }
            });
        }


        private void AgregarDatosAula(int cantidad, List<SeleniumEntity> seleniumEntities)
        {
            IWebElement fieldElement = wait.Until(ExpectedConditions.ElementIsVisible(By.Id("ctl00_cntBody_ucClassroom_cboTrainingCenter")));
            Utilities.SelectOptionByDropDownList(js, fieldElement, "Oficinas Guápiles - Interno");
            myCommons.Log.Information($"{DateTime.Now}:Selecionado el Centro de Capacitación: Oficinas Guápiles - Interno");


            wait.Until(ExpectedConditions.ElementToBeClickable(By.Id("ctl00_cntBody_ucClassroom_txtClassroomCode"))).Click();
            Utilities.CleanFields(js, "ctl00_cntBody_ucClassroom_txtClassroomCode");
            driver.FindElement(By.Id("ctl00_cntBody_ucClassroom_txtClassroomCode")).SendKeys(seleniumEntities[0].Code);
            myCommons.Log.Information($"{DateTime.Now}:Ingresando el código del Aula {seleniumEntities[0].Code}");


            wait.Until(ExpectedConditions.ElementToBeClickable(By.Id("ctl00_cntBody_ucClassroom_txtClassroomDescription"))).Click();
            Utilities.CleanFields(js, "ctl00_cntBody_ucClassroom_txtClassroomDescription");
            driver.FindElement(By.Id("ctl00_cntBody_ucClassroom_txtClassroomDescription")).SendKeys(seleniumEntities[0].Description);
            myCommons.Log.Information($"{DateTime.Now}:Ingresando de la descripción del Aula {seleniumEntities[0].Description}");


            wait.Until(ExpectedConditions.ElementToBeClickable(By.Id("ctl00_cntBody_ucClassroom_txtCapacity"))).Click();
            Utilities.CleanFields(js, "ctl00_cntBody_ucClassroom_txtCapacity");
           
            driver.FindElement(By.Id("ctl00_cntBody_ucClassroom_txtCapacity")).SendKeys("3");
            myCommons.Log.Information($"{DateTime.Now}:Ingresando la capacidad del Aula:  3");

            wait.Until(ExpectedConditions.ElementToBeClickable(By.Id("ctl00_cntBody_ucClassroom_txtComments"))).Click();
            Utilities.CleanFields(js, "ctl00_cntBody_ucClassroom_txtComments");
            driver.FindElement(By.Id("ctl00_cntBody_ucClassroom_txtComments")).SendKeys("Selenium");
            myCommons.Log.Information($"{DateTime.Now}:Ingresando la Facilidad Disponible del  Aula : Selenium");


            wait.Until(ExpectedConditions.ElementToBeClickable(By.CssSelector("#ctl00_cntBody_uppDialogControl .form-horizontal"))).Click();
            wait.Until(ExpectedConditions.ElementToBeClickable(By.CssSelector(".col-sm-6 .active"))).Click();
            myCommons.Log.Information($"{DateTime.Now}:Click en el boton de activar el aula");

            wait.Until(ExpectedConditions.ElementToBeClickable(By.Id("ctl00_cntBody_btnAccept"))).Click();


            myCommons.Log.Information($"{DateTime.Now}: Click en Acpeptar para Guardar el Registro de  Aula ");

            Thread.Sleep(1500);


            wait.Until(ExpectedConditions.ElementExists(By.CssSelector("div.alert.alert-autocloseable-msg.alert-success")));
            wait.Until(ExpectedConditions.ElementIsVisible(By.CssSelector("div.alert.alert-autocloseable-msg.alert-success")));
            wait.Until(ExpectedConditions.InvisibilityOfElementLocated(By.CssSelector("div.alert.alert-autocloseable-msg.alert-success")));
            wait.Until(drv => drv.PageSource.Contains("La operación fue realizada exitosamente"));



            Thread.Sleep(1500);

            myCommons.Log.Information($"{DateTime.Now}:Creando exitosamente el Aula: AB001_Buscar");

           

        }
    }
}