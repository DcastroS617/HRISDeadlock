// Generated by Selenium IDE
using DOLE.HRIS.NUnit.Test;
using DOLE.HRIS.NUnit.Test.Utilities;
using NUnit.Framework;
using NUnit.Framework.Interfaces;
using OpenQA.Selenium;
using OpenQA.Selenium.Edge;
using OpenQA.Selenium.Support.UI;
using SeleniumExtras.WaitHelpers;
using System;
using System.Collections.Generic;
using System.Configuration;
using System.Threading;
using System.Threading.Tasks;

namespace DOLE.HRIS.Application.Automation.Selenium
{
    [TestFixture]
    [Category("Aulas")]
    public class TC002FiltrosCaracteresEspecialesAulaTest
    {
        private readonly string urlEntorno = Environment.GetEnvironmentVariable("UrlApplicationForTesting", EnvironmentVariableTarget.Process);
        private string urlTest = "";
        private readonly string urlScreen = "/Training/Maintenances/Classrooms.aspx";

        private readonly SeleniumEntity seleniumEntities = new SeleniumEntity(@"Escript/>test!@#$%^*()__++{}: <>?< script />  ;:,.[L¨P¨P*ñ{01'187:Ñ[*?P>.><<!@#$%^&*((", @"Escript/>test!@#$%^*()__++{}:<>?<script/>;:,.[L¨P¨P*ñ{09'987:Ñ[*?P>.><<!@#$%^&*((");


        private IWebDriver driver;
        public IDictionary<string, object> vars { get; private set; }
        private IJavaScriptExecutor js;
        Commons myCommons;
        WebDriverWait wait;
        String expectedErrorMessage = "No existen registros que mostrar.";


        [SetUp]
        public void SetUp()
        {
            urlTest = !string.IsNullOrEmpty(urlEntorno) ? urlEntorno : ConfigurationManager.AppSettings.Get("UrlApplicationForTesting");
            // Inicializa el driver de Edge
            driver = new EdgeDriver();
            myCommons = new Commons();
            wait = new WebDriverWait(driver, TimeSpan.FromSeconds(60));

            driver.Manage().Window.Maximize();
            // Inicializa el ejecutor de JavaScript y el diccionario de variables
            js = (IJavaScriptExecutor)driver;
            vars = new Dictionary<string, object>();
            myCommons.log();
        }

        [TearDown]
        protected void TearDown()
        {
            if (TestContext.CurrentContext.Result.Outcome.Status == TestStatus.Failed)
            {
                myCommons.TakeScreenshot(driver, TestContext.CurrentContext.Test.Name);
            }

            driver.Quit();
        }

        [Test]
        public async Task TC002FiltrosCaracteresEspecialesAula()
        {
            await myCommons.SeleniumSetup(wait, driver, urlTest, urlScreen);

            // Espera a que el botón con ID que contiene 'btnAdd' sea clickeable y haz clic en él
            wait.Until(ExpectedConditions.ElementIsVisible((By.Id("ctl00_cntBody_btnAdd"))));

            wait.Until(ExpectedConditions.ElementToBeClickable(By.Id("ctl00_cntBody_btnAdd"))).Click();
            myCommons.Log.Information($"{DateTime.Now}: Ingresando a la modal de Creación de Aulas.");

            AgregarDatosAula(new List<SeleniumEntity> { seleniumEntities });

            //limpiar los filtros y luego ingresar ingresando caracteres en el campo de Código
            wait.Until(ExpectedConditions.ElementIsVisible((By.Id("ctl00_cntBody_txtClassroomCodeFilter"))));
            Utilities.CleanFields(js, "ctl00_cntBody_txtClassroomCodeFilter");
            Utilities.CleanFields(js, "ctl00_cntBody_txtClassroomDescriptionFilter");
            Utilities.CleanFields(js, "ctl00_cntBody_txtMinCapacityFilter");
            Utilities.CleanFields(js, "ctl00_cntBody_txtMaxCapacityFilter");


            wait.Until(ExpectedConditions.ElementToBeClickable(By.Id("ctl00_cntBody_txtClassroomCodeFilter"))).Click();
            driver.FindElement(By.Id("ctl00_cntBody_txtClassroomCodeFilter")).SendKeys("Escripttes");

            myCommons.Log.Information($"{DateTime.Now}: Digitando caracteres en el filtro txtClassroomCodeFilter." + seleniumEntities.Code);

            // Buscar por código
            wait.Until(ExpectedConditions.ElementToBeClickable(By.CssSelector("button.btn.btn-default.btnAjaxAction"))).Click();
            myCommons.Log.Information($"{DateTime.Now}: Click en el botón de Buscar.");


            Thread.Sleep(2000);
            // Espera que el nuevo contenido esté visible y luego captura el texto
            wait.Until(ExpectedConditions.ElementIsVisible(By.CssSelector("span[data-id='ClassroomCode']")));
          
            //bool codigoCorrecto = wait.Until(drv =>
            //{
            //    var element = drv.FindElement(By.Id("dvClassroomCode"));
            //    return element.Displayed && element.Text == "Escripttes";
            //});


            bool codigoCorrecto = wait.Until(drv =>
            {
                try
                {
                    var element = drv.FindElement(By.Id("dvClassroomCode"));
                    return element.Displayed && element.Text == "Escripttes";
                }
                catch (StaleElementReferenceException)
                {
                    return false;
                }
            });


            Assert.IsTrue(codigoCorrecto, "El código del aula no coincide con 'Escripttes'.");
            myCommons.Log.Information($"{DateTime.Now}: Validando el Assert en el campo de código  " + codigoCorrecto);


            Utilities.CleanFields(js, "ctl00_cntBody_txtClassroomCodeFilter");
            Utilities.CleanFields(js, "ctl00_cntBody_txtClassroomDescriptionFilter");
            Utilities.CleanFields(js, "ctl00_cntBody_txtMinCapacityFilter");
            Utilities.CleanFields(js, "ctl00_cntBody_txtMaxCapacityFilter");

            wait.Until(ExpectedConditions.ElementToBeClickable(By.Id("ctl00_cntBody_txtClassroomDescriptionFilter")));
            driver.FindElement(By.Id("ctl00_cntBody_txtClassroomDescriptionFilter")).SendKeys(seleniumEntities.Description);
            myCommons.Log.Information($"{DateTime.Now}: Digitando caracteres en el filtro txtClassroomDescriptionFilter." + seleniumEntities.Description);


            wait.Until(ExpectedConditions.ElementToBeClickable(By.CssSelector("button.btn.btn-default.btnAjaxAction"))).Click();
            myCommons.Log.Information($"{DateTime.Now}: Click en el botón de Buscar.");

            Thread.Sleep(1500);
            // Espera que el nuevo contenido esté visible y luego captura el texto
            wait.Until(ExpectedConditions.ElementIsVisible(By.Id("dvClassroomDescription")));

            bool descOK = wait.Until(drv =>
            drv.FindElement(By.Id("dvClassroomDescription")).Displayed &&
            drv.FindElement(By.Id("dvClassroomDescription")).Text == "Escripttest@__:script:.LPPñ09987:ÑP.@"
            );
            Assert.IsTrue(descOK, "La descripción no coincide con el valor esperado.");
            myCommons.Log.Information($"{DateTime.Now}: Validando el Assert en el campo de Descripción  " + descOK);

            wait.Until(ExpectedConditions.ElementIsVisible(By.Id("ctl00_cntBody_txtClassroomCodeFilter")));
            Utilities.CleanFields(js, "ctl00_cntBody_txtClassroomCodeFilter");
            Utilities.CleanFields(js, "ctl00_cntBody_txtClassroomDescriptionFilter");
            Utilities.CleanFields(js, "ctl00_cntBody_txtMinCapacityFilter");
            Utilities.CleanFields(js, "ctl00_cntBody_txtMinCapacityFilter");

            wait.Until(ExpectedConditions.ElementToBeClickable(By.Id("ctl00_cntBody_txtMinCapacityFilter")));
            driver.FindElement(By.Id("ctl00_cntBody_txtClassroomCodeFilter")).SendKeys(seleniumEntities.Code);

            wait.Until(ExpectedConditions.ElementToBeClickable(By.Id("ctl00_cntBody_txtMinCapacityFilter")));
            driver.FindElement(By.Id("ctl00_cntBody_txtMinCapacityFilter")).SendKeys(seleniumEntities.Code);
            myCommons.Log.Information($"{DateTime.Now}: Digitando caracteres en el filtro Capacidad ctl00_cntBody_txtMinCapacityFilter." + seleniumEntities.Description);


            wait.Until(ExpectedConditions.ElementToBeClickable(By.CssSelector("button.btn.btn-default.btnAjaxAction"))).Click();
            myCommons.Log.Information($"{DateTime.Now}: Click en el botón de Buscar.");

            int valor;  // Convertir el texto a número


            var CapacityMinElement = wait.Until(ExpectedConditions.ElementIsVisible(By.Id("dvCapacity")));
            // Reemplaza con el ID correcto
            if (CapacityMinElement != null)
                {


                //var elem = wait.Until(ExpectedConditions.ElementIsVisible(By.Id("dvCapacity")));

                //// Valida con la referencia capturada
                //if (!int.TryParse(elem.Text, out int var))
                //{
                //    Assert.Fail("El valor no es numérico.");
                //}
                //Assert.That(var, Is.InRange(0, 100), $"El valor {var} está fuera del rango permitido (0-100).");
                //myCommons.Log.Information($"{DateTime.Now}: Validando el Assert en el campo de capacidad, valor encontrado: {var}");


                //    //bool capaOK = wait.Until(drv =>
                //drv.FindElement(By.Id("dvCapacity")).Displayed &&
                //drv.FindElement(By.Id("dvCapacity")).Text == "23");

                //    Assert.IsTrue(capaOK, "La descripción no coincide con el valor esperado.");
                //    myCommons.Log.Information($"{DateTime.Now}: Validando el Assert en el campo de Descripción  " + capaOK);


                bool capaOK = wait.Until(drv =>
                {
                    try
                    {
                        var el = drv.FindElement(By.Id("dvCapacity"));
                        return el.Displayed && el.Text == "23";
                    }
                    catch (StaleElementReferenceException)
                    {
                        return false;
                    }
                });

                Assert.IsTrue(capaOK, "La capacidad no coincide con el valor esperado.");
                myCommons.Log.Information($"{DateTime.Now}: Validando el Assert en el campo de Capacidad  " + capaOK);

            }
            else
                {

                wait.Until(ExpectedConditions.ElementIsVisible(By.Id("ctl00_cntBody_grvList")));

                string errorMessage = driver.FindElement(By.Id("ctl00_cntBody_grvList")).Text;
                Assert.AreEqual(expectedErrorMessage, errorMessage, "Error Message Incorrecto.");
                myCommons.Log.Information($"{DateTime.Now}: Validando el Assert {expectedErrorMessage} ");
                }




            wait.Until(ExpectedConditions.ElementIsVisible(By.Id("ctl00_cntBody_txtClassroomCodeFilter")));
            Utilities.CleanFields(js, "ctl00_cntBody_txtClassroomCodeFilter");
            Utilities.CleanFields(js, "ctl00_cntBody_txtClassroomDescriptionFilter");
            Thread.Sleep(1000);
            Utilities.CleanFields(js, "ctl00_cntBody_txtMinCapacityFilter");



            wait.Until(ExpectedConditions.ElementToBeClickable(By.Id("ctl00_cntBody_txtClassroomCodeFilter")));
            driver.FindElement(By.Id("ctl00_cntBody_txtClassroomCodeFilter")).SendKeys(seleniumEntities.Code);
            driver.FindElement(By.Id("ctl00_cntBody_txtMaxCapacityFilter")).SendKeys(seleniumEntities.Description);
            myCommons.Log.Information($"{DateTime.Now}: Digitando caracteres en el filtro cntBody_txtMaxCapacityFilter. " + seleniumEntities.Description);


            wait.Until(ExpectedConditions.ElementToBeClickable(By.CssSelector("button.btn.btn-default.btnAjaxAction"))).Click();
            myCommons.Log.Information($"{DateTime.Now}: Click en el botón de Buscar.");
            Thread.Sleep(1000);

            // Espera que el elemento aparezca y captura su referencia
            var elementCapacity = wait.Until(ExpectedConditions.ElementIsVisible(By.Id("dvCapacity")));

            // Valida con la referencia capturada
            if (!int.TryParse(elementCapacity.Text, out int val))
            {
                Assert.Fail("El valor no es numérico.");
            }
            Assert.That(val, Is.InRange(0, 100), $"El valor {val} está fuera del rango permitido (0-100).");
            myCommons.Log.Information($"{DateTime.Now}: Validando el Assert en el campo de capacidad, valor encontrado: {val}");


            Thread.Sleep(1000);
        }




        private void AgregarDatosAula(List<SeleniumEntity> seleniumEntities)
        {

            wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//select[contains(@id, 'ucClassroom_cboTrainingCenter')]")));
            var cboTrainingCenter = driver.FindElement(By.XPath("//select[contains(@id, 'ucClassroom_cboTrainingCenter')]"));
            Utilities.SelectOptionByDropDownList(js, cboTrainingCenter, "Estrada - Interno");
            IWebElement fieldElement = wait.Until(ExpectedConditions.ElementIsVisible(By.Id("ctl00_cntBody_ucClassroom_cboTrainingCenter")));
            Utilities.SelectOptionByDropDownList(js, fieldElement, "Estrada - Interno");
            myCommons.Log.Information($"{DateTime.Now}: Seleccionado el Centro de Capacitación .");

            wait.Until(ExpectedConditions.ElementToBeClickable(By.Id("ctl00_cntBody_ucClassroom_txtClassroomCode"))).Click();
            Utilities.CleanFields(js, "ctl00_cntBody_ucClassroom_txtClassroomCode");
            driver.FindElement(By.Id("ctl00_cntBody_ucClassroom_txtClassroomCode")).SendKeys(seleniumEntities[0].Code);
            myCommons.Log.Information($"{DateTime.Now}: Ingresando el código.  " + seleniumEntities[0].Code);


            wait.Until(ExpectedConditions.ElementToBeClickable(By.Id("ctl00_cntBody_ucClassroom_txtClassroomDescription"))).Click();
            Utilities.CleanFields(js, "ctl00_cntBody_ucClassroom_txtClassroomDescription");
            driver.FindElement(By.Id("ctl00_cntBody_ucClassroom_txtClassroomDescription")).SendKeys(seleniumEntities[0].Description);
            myCommons.Log.Information($"{DateTime.Now}: Ingresando la Descripción.  " + seleniumEntities[0].Description);


            wait.Until(ExpectedConditions.ElementToBeClickable(By.Id("ctl00_cntBody_ucClassroom_txtCapacity"))).Click();
            Utilities.CleanFields(js, "ctl00_cntBody_ucClassroom_txtCapacity");
            driver.FindElement(By.Id("ctl00_cntBody_ucClassroom_txtCapacity")).SendKeys("23!@#$%^*()__++{}: <>?");
            myCommons.Log.Information($"{DateTime.Now}: Intentar ingresar la Capacidad con carácteres especiales");


            wait.Until(ExpectedConditions.ElementToBeClickable(By.Id("ctl00_cntBody_ucClassroom_txtComments"))).Click();
            Utilities.CleanFields(js, "ctl00_cntBody_ucClassroom_txtComments");
            driver.FindElement(By.Id("ctl00_cntBody_ucClassroom_txtComments")).SendKeys("Selenium!@#$%^*()__++{}: <>?");
            myCommons.Log.Information($"{DateTime.Now}: Intentar ingresar en Comentarios con carácteres especiales");


            driver.FindElement(By.CssSelector("#ctl00_cntBody_uppDialogControl .form-horizontal")).Click();
            driver.FindElement(By.CssSelector(".col-sm-6 .active")).Click();

            wait.Until(ExpectedConditions.ElementIsVisible(By.Id("ctl00_cntBody_btnAccept"))).Click();

            //driver.FindElement(By.Id("ctl00_cntBody_btnAccept")).Click();
            myCommons.Log.Information($"{DateTime.Now}: Click en el botén de Aceptar");

            Thread.Sleep(1500);

            wait.Until(ExpectedConditions.ElementIsVisible(By.CssSelector("div.alert.alert-autocloseable-msg.alert-success")));
            var alert = driver.FindElements(By.CssSelector("div.alert.alert-autocloseable-msg.alert-success"));
            if (alert.Count > 0)
            {
                wait.Until(ExpectedConditions.ElementIsVisible(By.CssSelector("div.alert.alert-autocloseable-msg.alert-success")));
            }
            else
            {
                myCommons.Log.Information("No se encontró la alerta de éxito");
            }
            wait.Until(ExpectedConditions.InvisibilityOfElementLocated(By.CssSelector("div.alert.alert-autocloseable-msg.alert-success")));

        }
    }
}