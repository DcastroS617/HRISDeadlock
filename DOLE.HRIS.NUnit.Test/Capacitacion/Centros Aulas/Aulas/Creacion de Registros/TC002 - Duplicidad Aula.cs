// Generated by Selenium IDE
using DOLE.HRIS.NUnit.Test;
using DOLE.HRIS.NUnit.Test.Utilities;
using NUnit.Framework;
using NUnit.Framework.Interfaces;
using OpenQA.Selenium;
using OpenQA.Selenium.Edge;
using OpenQA.Selenium.Interactions;
using OpenQA.Selenium.Support.UI;
using SeleniumExtras.WaitHelpers;
using Serilog;
using Serilog.Core;
using System;
using System.Collections.Generic;
using System.Configuration;
using System.Drawing;
using System.Net;
using System.Net.Http;
using System.Threading;
using System.Threading.Tasks;

namespace DOLE.HRIS.Application.Automation.Selenium
{
    [TestFixture]
    [Category("Aulas")]
    public class TC002DuplicidadAulaCreacion
    {
     private readonly string urlEntorno = Environment.GetEnvironmentVariable("UrlApplicationForTesting", EnvironmentVariableTarget.Process);
     private string urlTest = "";
     private readonly string urlScreen = "/Training/Maintenances/Classrooms.aspx";
     private readonly List<SeleniumEntity> seleniumEntities = new List<SeleniumEntity>();


      

     private IWebDriver driver;
     WebDriverWait wait;
     public IDictionary<string, object> vars { get; private set; }
     private IJavaScriptExecutor js;
     //Actions actions;
     string expectedErrorMessage = "Los datos ingresados provocan un conflicto con otro registro por duplicidad de código.\nLos datos del registro existente son los siguientes:";
     Commons myCommons;
     
     int cantidad;



        [SetUp]
      public void SetUp()
      {
       urlTest = !string.IsNullOrEmpty(urlEntorno) ? urlEntorno : ConfigurationManager.AppSettings.Get("UrlApplicationForTesting");
       driver = new EdgeDriver();
       myCommons = new Commons();
       myCommons.log();

            wait = new WebDriverWait(driver, TimeSpan.FromSeconds(60));


       driver.Manage().Window.Maximize();
       // Inicializa el ejecutor de JavaScript y el diccionario de variables

       js = (IJavaScriptExecutor)driver;
       vars = new Dictionary<string, object>();

      // Agrega entidades de Selenium
        seleniumEntities.Add(new SeleniumEntity("AD001", "AD001_Duplicado"));
       seleniumEntities.Add(new SeleniumEntity("AD002", "AD002_Duplicado"));

        }
        
      [TearDown]
        protected void TearDown()
        {
            if (TestContext.CurrentContext.Result.Outcome.Status == TestStatus.Failed)
            {
                myCommons.TakeScreenshot(driver, TestContext.CurrentContext.Test.Name);
            }

            driver.Quit();
        }

      [Test]
      public async Task TC002DuplicidadAula()
      {


       Random rnd = new Random();
       Logger log;
       await myCommons.SeleniumSetup(wait, driver, urlTest, urlScreen);


       for (int i = 0; i < 2; i++)
       {
          cantidad = rnd.Next(1, 10);

          Thread.Sleep(3000);

         wait.Until(ExpectedConditions.ElementToBeClickable(By.Id("ctl00_cntBody_btnAdd"))).Click();
         // log.Information($"{DateTime.Now}: Ingresando a la modal de Creación de Aulas.");
         myCommons.Log.Information($"{DateTime.Now}: Ingresando a la modal de Creación de Aulas.");

         myCommons.AgregarDatosAula(wait, driver, js, i, cantidad, seleniumEntities);
         myCommons.Log.Information($"{DateTime.Now}: Digitando los datos para la creación del registro.");

         Thread.Sleep(1000);

        wait.Until(ExpectedConditions.ElementIsVisible(By.Id("ctl00_cntBody_btnAdd")));


       wait.Until(ExpectedConditions.ElementToBeClickable(By.Id("ctl00_cntBody_btnAdd"))).Click();
        myCommons.Log.Information($"{DateTime.Now}: Esperando que el botón de Aceptar se muestre.");
            {
                var element = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//button[contains(@id, 'btnAdd')]")));
                Actions builder = new Actions(driver);
                builder.MoveToElement(element).Perform();
            }

            // Realiza acciones con el elemento <body>
            {
             var bodyElement = wait.Until(ExpectedConditions.ElementIsVisible(By.TagName("body")));
              Actions builder = new Actions(driver);
              builder.MoveToElement(bodyElement, 0, 0).Perform();
            }

        IWebElement fieldElement = driver.FindElement(By.Id("ctl00_cntBody_ucClassroom_cboTrainingCenter"));
        Utilities.SelectOptionByDropDownList(js, fieldElement, "Estrada - Interno");
        myCommons.Log.Information($"{DateTime.Now}: Seleccionando el Centro de Capacitación Estrada - Interno");


        driver.FindElement(By.Id("ctl00_cntBody_ucClassroom_txtClassroomCode")).Click();
        Utilities.CleanFields(js, "ctl00_cntBody_ucClassroom_txtClassroomCode");
        driver.FindElement(By.Id("ctl00_cntBody_ucClassroom_txtClassroomCode")).SendKeys(seleniumEntities[i].Code);
        myCommons.Log.Information($"{DateTime.Now}:Ingresando el código" + seleniumEntities[i].Code);


        driver.FindElement(By.Id("ctl00_cntBody_ucClassroom_txtClassroomDescription")).Click();
        Utilities.CleanFields(js, "ctl00_cntBody_ucClassroom_txtClassroomDescription");
        driver.FindElement(By.Id("ctl00_cntBody_ucClassroom_txtClassroomDescription")).SendKeys(seleniumEntities[i].Description);
        myCommons.Log.Information($"{DateTime.Now}:Ingresando la Descripción" + seleniumEntities[i].Description);


        driver.FindElement(By.Id("ctl00_cntBody_ucClassroom_txtCapacity")).Click();
        Utilities.CleanFields(js, "ctl00_cntBody_ucClassroom_txtCapacity");
        driver.FindElement(By.Id("ctl00_cntBody_ucClassroom_txtCapacity")).SendKeys("02");
        myCommons.Log.Information($"{DateTime.Now}:Ingresando Capacidad" );


        driver.FindElement(By.Id("ctl00_cntBody_ucClassroom_txtComments")).Click();
        Utilities.CleanFields(js, "ctl00_cntBody_ucClassroom_txtComments");
        driver.FindElement(By.Id("ctl00_cntBody_ucClassroom_txtComments")).SendKeys("Selenium");
        myCommons.Log.Information($"{DateTime.Now}:Ingresando Comentarios");


        driver.FindElement(By.CssSelector("#ctl00_cntBody_uppDialogControl .form-horizontal")).Click();
        driver.FindElement(By.CssSelector(".col-sm-6 .active")).Click();
        myCommons.Log.Information($"{DateTime.Now}:Habilitar el registro");

        // Espera a que el botón con ID que contiene 'btnAdd' sea clickeable y haz clic en él

        wait.Until(ExpectedConditions.ElementIsVisible(By.Id("ctl00_cntBody_btnAccept")));
        wait.Until(ExpectedConditions.ElementToBeClickable(By.Id("ctl00_cntBody_btnAccept"))).Click();
        myCommons.Log.Information($"{DateTime.Now}: Click en Guardar el registro");



         wait.Until(ExpectedConditions.ElementIsVisible(By.Id("ctl00_cntBody_divDuplicatedDialogText")));
        string errorMessage = driver.FindElement(By.Id("ctl00_cntBody_divDuplicatedDialogText")).Text;
        errorMessage = errorMessage.Replace("\r", "");
        Assert.AreEqual(expectedErrorMessage, errorMessage, "El mensaje de error no coincide con el esperado.");
        myCommons.Log.Information($"{DateTime.Now}:Despliegue de modal de Registro duplicado con el mensaje " + expectedErrorMessage);



        try
            {
             //Encuentra el botón usando un selector CSS que contiene 'btnDuplicatedAccept' en el id
             var duplicateButton = driver.FindElement(By.XPath("//button[contains(@id, 'btnDuplicatedAccept')]"));
             duplicateButton.Click();

             Thread.Sleep(3000);
              wait.Until(ExpectedConditions.ElementIsVisible(By.Id("btnCancel")));

               driver.FindElement(By.Id("btnCancel")).Click();
              {
               var element = driver.FindElement(By.TagName("body"));
               Actions builder = new Actions(driver);
               builder.MoveToElement(element, 0, 0).Perform();
               myCommons.Log.Information($"{DateTime.Now}: Cerrando modal de Registro Dumplicado");

              }
             }
             catch (Exception)
             {

              
              driver.FindElement(By.CssSelector(".btn-default .active")).Click();
              driver.FindElement(By.Id("ctl00_cntBody_btnActivateDeletedAccept")).Click();
              myCommons.Log.Information($"{DateTime.Now}: Cerrando modal de Registro Dumplicado");

             }

                driver.Manage().Timeouts().ImplicitWait = TimeSpan.FromSeconds(10);
      
            
       }

      }
    }
}