// Generated by Selenium IDE
using DOLE.HRIS.NUnit.Test;
using DOLE.HRIS.NUnit.Test.Utilities;
using NUnit.Framework;
using NUnit.Framework.Interfaces;
using OpenQA.Selenium;
using OpenQA.Selenium.Edge;
using OpenQA.Selenium.Interactions;
using OpenQA.Selenium.Support.UI;
using SeleniumExtras.WaitHelpers;
using Serilog.Core;
using System;
using System.Collections.Generic;
using System.Configuration;
using System.Runtime.InteropServices;
using System.Threading;
using System.Threading.Tasks;

namespace DOLE.HRIS.Application.Automation.Selenium
{
    [TestFixture]
    [Category("Aulas")]
    public class TC004EspaciosBlancosAulaCreacion
    {
        private readonly string urlEntorno = Environment.GetEnvironmentVariable("UrlApplicationForTesting", EnvironmentVariableTarget.Process);
        private string urlTest = "";
        private readonly SeleniumEntity seleniumEntities = new SeleniumEntity("", "");

        private readonly List<SeleniumEntity> seleniumEntitiesCreate = new List<SeleniumEntity>();

        private readonly string urlScreen = "/Training/Maintenances/Classrooms.aspx";
        private IWebDriver driver;
        public IDictionary<string, object> vars { get; private set; }
        private IJavaScriptExecutor js;
        WebDriverWait wait;
        Commons myCommons;

        string expectedErrorMessage = "Por favor verifique los campos marcados en el formulario, corrija los errores e intente nuevamente.";
        //Actions actions;

        [SetUp]
        public void SetUp()
        {
            urlTest = !string.IsNullOrEmpty(urlEntorno) ? urlEntorno : ConfigurationManager.AppSettings.Get("UrlApplicationForTesting");
            driver = new EdgeDriver();
            driver.Manage().Window.Maximize();
            myCommons = new Commons();
            myCommons.log();

            wait = new WebDriverWait(driver, TimeSpan.FromSeconds(60));

            js = (IJavaScriptExecutor)driver;
            vars = new Dictionary<string, object>();

            seleniumEntitiesCreate.Add(new SeleniumEntity("AVU001", "AVU001_EspaciosVacios"));

        }

        [TearDown]
        protected void TearDown()
        {
            if (TestContext.CurrentContext.Result.Outcome.Status == TestStatus.Failed)
            {
                myCommons.TakeScreenshot(driver, TestContext.CurrentContext.Test.Name);
            }

            driver.Quit();
        }

        [Test]
        public async Task TC003EspaciosBlancosAula()
        {
          
            await myCommons.SeleniumSetup(wait, driver, urlTest, urlScreen);

            wait.Until(ExpectedConditions.InvisibilityOfElementLocated(By.Id("backdrop-mensajeria")));

            wait.Until(ExpectedConditions.ElementIsVisible(By.Id("ctl00_cntBody_btnAdd")));
            wait.Until(ExpectedConditions.ElementToBeClickable(By.Id("ctl00_cntBody_btnAdd"))).Click();
            myCommons.Log.Information($"{DateTime.Now}: Ingresando a la modal de Creación de Aulas.");


            wait.Until(ExpectedConditions.ElementIsVisible(By.Id("ctl00_cntBody_ucClassroom_cboTrainingCenter")));
            driver.FindElement(By.Id("ctl00_cntBody_ucClassroom_cboTrainingCenter")).Click();
            {
                var dropdown = driver.FindElement(By.Id("ctl00_cntBody_ucClassroom_cboTrainingCenter"));
                dropdown.FindElement(By.XPath("//option[. = '']")).Click();
                myCommons.Log.Information($"{DateTime.Now}: Seleccionado el Centro de Capacitación .");

            }

            driver.FindElement(By.Id("ctl00_cntBody_ucClassroom_txtClassroomCode")).Click();
            Utilities.CleanFields(js, "ctl00_cntBody_ucClassroom_txtClassroomCode");
            driver.FindElement(By.Id("ctl00_cntBody_ucClassroom_txtClassroomCode")).SendKeys(seleniumEntities.Code);
            myCommons.Log.Information($"{DateTime.Now}: Ingresando el código en blanco.  " + seleniumEntities.Code);


            driver.FindElement(By.Id("ctl00_cntBody_ucClassroom_txtClassroomDescription")).Click();
            Utilities.CleanFields(js, "ctl00_cntBody_ucClassroom_txtClassroomDescription");
            driver.FindElement(By.Id("ctl00_cntBody_ucClassroom_txtClassroomDescription")).SendKeys(seleniumEntities.Description);
            myCommons.Log.Information($"{DateTime.Now}: Ingresando la Descripción en blanco .  " + seleniumEntities.Description);


            driver.FindElement(By.Id("ctl00_cntBody_ucClassroom_txtCapacity")).Click();
            Utilities.CleanFields(js, "ctl00_cntBody_ucClassroom_txtCapacity");
            driver.FindElement(By.Id("ctl00_cntBody_ucClassroom_txtCapacity")).SendKeys(seleniumEntities.Description);
            myCommons.Log.Information($"{DateTime.Now}: Intentar ingresar blancos en capacidad");


            driver.FindElement(By.Id("ctl00_cntBody_ucClassroom_txtComments")).Click();
            Utilities.CleanFields(js, "ctl00_cntBody_ucClassroom_txtComments");
            driver.FindElement(By.Id("ctl00_cntBody_ucClassroom_txtComments")).SendKeys(seleniumEntities.Description);
            myCommons.Log.Information($"{DateTime.Now}: Intentar ingresar blancos en comentarios");


            driver.FindElement(By.CssSelector("#ctl00_cntBody_uppDialogControl .form-horizontal")).Click();
            driver.FindElement(By.CssSelector(".col-sm-6 .active")).Click();
            driver.FindElement(By.Id("ctl00_cntBody_btnAccept")).Click();
            myCommons.Log.Information($"{DateTime.Now}: Click en el botón de Aceptar ");


            wait.Until(ExpectedConditions.ElementIsVisible(By.CssSelector("h3[class='panel-title text-center']")));
           
            string errorMessage = driver.FindElement(By.CssSelector("div[class='panel-body text-center']")).Text;

            Assert.AreEqual(expectedErrorMessage, errorMessage, "Error Message Incorrecto.");
            myCommons.Log.Information($"{DateTime.Now}:Validando el Assert con el mensaje:  " + errorMessage);


            Thread.Sleep(3000);
        }
    }
}