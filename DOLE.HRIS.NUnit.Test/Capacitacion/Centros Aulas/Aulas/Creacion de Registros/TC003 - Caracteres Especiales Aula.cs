// Generated by Selenium IDE
using DOLE.HRIS.NUnit.Test;
using DOLE.HRIS.NUnit.Test.Utilities;
using NUnit.Framework;
using NUnit.Framework.Interfaces;
using OpenQA.Selenium;
using OpenQA.Selenium.Edge;
using OpenQA.Selenium.Interactions;
using OpenQA.Selenium.Support.UI;
using SeleniumExtras.WaitHelpers;
using Serilog;
using Serilog.Core;
using System;
using System.Collections.Generic;
using System.Configuration;
using System.IO;
using System.Net;
using System.Net.Http;
using System.Threading;
using System.Threading.Tasks;

namespace DOLE.HRIS.Application.Automation.Selenium
{
    [TestFixture]
    [Category("Aulas")]
    public class TC003CaracteresEspecialesAulaCreacion
    {
        private readonly string urlEntorno = Environment.GetEnvironmentVariable("UrlApplicationForTesting", EnvironmentVariableTarget.Process);
        private string urlTest = "";
        private readonly string URLScreen = "/Training/Maintenances/Classrooms.aspx";

        private readonly SeleniumEntity seleniumEntities = new SeleniumEntity(@"script/>test!@#$%^*()__++{}: <>?< script />  ;:,.[L¨P¨P*ñ{09'987:Ñ[*?P>.><<!@#$%^&*((", @"script/>test!@#$%^*()__++{}: <>?< script />  ;:,.[L¨P¨P*ñ{09'987:Ñ[*?P>.><<!@#$%^&*((");
      
        private IWebDriver driver;
        public IDictionary<string, object> vars { get; private set; }
        private IJavaScriptExecutor js;
        WebDriverWait wait;
        //Actions actions;
        Commons myCommons;

        [SetUp]
        public void SetUp()
        {
            urlTest = !string.IsNullOrEmpty(urlEntorno) ? urlEntorno : ConfigurationManager.AppSettings.Get("UrlApplicationForTesting");
            driver = new EdgeDriver();
            driver.Manage().Window.Maximize();
            myCommons = new Commons();
            myCommons.log();

            wait = new WebDriverWait(driver, TimeSpan.FromSeconds(60));

            // Inicializa el ejecutor de JavaScript y el diccionario de variables
            js = (IJavaScriptExecutor)driver;
            vars = new Dictionary<string, object>();
        }

        [TearDown]
        protected void TearDown()
        {
            if (TestContext.CurrentContext.Result.Outcome.Status == TestStatus.Failed)
            {
                myCommons.TakeScreenshot(driver, TestContext.CurrentContext.Test.Name);
            }

            driver.Quit();
        }

              
      

        [Test]
        public async Task TC003CaracteresEspecialesAula()
        {
          
            await myCommons.SeleniumSetup(wait, driver, urlTest, URLScreen);

            // Espera a que el botón con ID que contiene 'btnAdd' sea clickeable y haz clic en él
            wait.Until(ExpectedConditions.ElementIsVisible(By.Id("ctl00_cntBody_btnAdd")));
            wait.Until(ExpectedConditions.ElementToBeClickable(By.Id("ctl00_cntBody_btnAdd"))).Click();
            driver.Manage().Timeouts().ImplicitWait = TimeSpan.FromSeconds(20);
            myCommons.Log.Information($"{DateTime.Now}: Ingresando a la modal de Creación de Aulas.");


            wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//select[contains(@id, 'ucClassroom_cboTrainingCenter')]")));
            var cboTrainingCenter = driver.FindElement(By.XPath("//select[contains(@id, 'ucClassroom_cboTrainingCenter')]"));
            Utilities.SelectOptionByDropDownList(js, cboTrainingCenter, "Estrada - Interno");
            IWebElement fieldElement = wait.Until(ExpectedConditions.ElementIsVisible(By.Id("ctl00_cntBody_ucClassroom_cboTrainingCenter")));
            Utilities.SelectOptionByDropDownList(js, fieldElement, "Estrada - Interno");
            myCommons.Log.Information($"{DateTime.Now}: Seleccionado el Centro de Capacitación .");



        
            wait.Until(ExpectedConditions.ElementIsVisible(By.Id("ctl00_cntBody_ucClassroom_txtClassroomCode")));
            wait.Until(ExpectedConditions.ElementToBeClickable(By.Id("ctl00_cntBody_ucClassroom_txtClassroomCode"))).Click();
            Utilities.CleanFields(js, "ctl00_cntBody_ucClassroom_txtClassroomCode");
            driver.FindElement(By.Id("ctl00_cntBody_ucClassroom_txtClassroomCode")).SendKeys(seleniumEntities.Code);
            myCommons.Log.Information($"{DateTime.Now}: Ingresando el código.  " + seleniumEntities.Code);

            wait.Until(ExpectedConditions.ElementIsVisible(By.Id("ctl00_cntBody_ucClassroom_txtClassroomDescription")));
            wait.Until(ExpectedConditions.ElementToBeClickable(By.Id("ctl00_cntBody_ucClassroom_txtClassroomDescription"))).Click();
            Utilities.CleanFields(js, "ctl00_cntBody_ucClassroom_txtClassroomDescription");
            driver.FindElement(By.Id("ctl00_cntBody_ucClassroom_txtClassroomDescription")).SendKeys(seleniumEntities.Description);
            myCommons.Log.Information($"{DateTime.Now}: Ingresando la Descripción.  " + seleniumEntities.Description);

            wait.Until(ExpectedConditions.ElementIsVisible(By.Id("ctl00_cntBody_ucClassroom_txtCapacity")));
            wait.Until(ExpectedConditions.ElementToBeClickable(By.Id("ctl00_cntBody_ucClassroom_txtCapacity"))).Click();
            Utilities.CleanFields(js, "ctl00_cntBody_ucClassroom_txtCapacity");
            driver.FindElement(By.Id("ctl00_cntBody_ucClassroom_txtCapacity")).SendKeys("23!@#$%^*()__++{}: <>?");
            myCommons.Log.Information($"{DateTime.Now}: Intentar ingresar la Capacidad con carácteres especiales");


            wait.Until(ExpectedConditions.ElementToBeClickable(By.Id("ctl00_cntBody_ucClassroom_txtComments"))).Click();
            Utilities.CleanFields(js, "ctl00_cntBody_ucClassroom_txtComments");
            driver.FindElement(By.Id("ctl00_cntBody_ucClassroom_txtComments")).SendKeys("Selenium!@#$%^*()__++{}: <>?");
            myCommons.Log.Information($"{DateTime.Now}: Intentar ingresar en Comentarios con carácteres especiales");


            driver.FindElement(By.CssSelector("#ctl00_cntBody_uppDialogControl .form-horizontal")).Click();
            driver.FindElement(By.CssSelector(".col-sm-6 .active")).Click();

             wait.Until(ExpectedConditions.ElementIsVisible(By.Id("ctl00_cntBody_btnAccept"))).Click();

            myCommons.Log.Information($"{DateTime.Now}: Click en el botén de Aceptar");


            Thread.Sleep(1500);

            wait.Until(ExpectedConditions.ElementExists(By.CssSelector("div.alert.alert-autocloseable-msg.alert-success")));
            wait.Until(ExpectedConditions.ElementIsVisible(By.CssSelector("div.alert.alert-autocloseable-msg.alert-success")));
            wait.Until(ExpectedConditions.InvisibilityOfElementLocated(By.CssSelector("div.alert.alert-autocloseable-msg.alert-success")));


            Thread.Sleep(1500);
            wait.Until(ExpectedConditions.ElementIsVisible(By.Id("ctl00_cntBody_txtClassroomCodeFilter")));
            Utilities.CleanFields(js, "ctl00_cntBody_txtClassroomCodeFilter");
            driver.FindElement(By.Id("ctl00_cntBody_txtClassroomCodeFilter")).SendKeys(seleniumEntities.Code);

            wait.Until(ExpectedConditions.ElementIsVisible(By.Id("ctl00_cntBody_btnSearch")));

            driver.FindElement(By.Id("ctl00_cntBody_btnSearch")).Click();
            myCommons.Log.Information($"{DateTime.Now}: Buscar el Código" + seleniumEntities.Code);

            Thread.Sleep(500);
            wait.Until(ExpectedConditions.ElementIsVisible(By.Id("dvClassroomCode")));
            string displayedCode = driver.FindElement(By.Id("dvClassroomCode")).Text;
            Assert.AreEqual("scripttest", displayedCode, "La código del aula no coincide.");
            myCommons.Log.Information($"{DateTime.Now}: Validando el Assert en el campo de Código  " + displayedCode);

            
            string displayedDescription = driver.FindElement(By.Id("dvClassroomDescription")).Text;
            Assert.AreEqual("scripttest@__: script :.LPPñ09987:ÑP.@", displayedDescription, "La descripción del aula no coincide.");
            myCommons.Log.Information($"{DateTime.Now}: Validando el Assert en el campo de Descripción  " + displayedDescription);


            string displayedTrainingCenterCode = driver.FindElement(By.Id("dvTrainingCenterDescription")).Text;
            Assert.AreEqual("Estrada - Interno", displayedTrainingCenterCode, "El código del centro de capacitación no coincide.");
            myCommons.Log.Information($"{DateTime.Now}: Validando el Assert en el campo de Centros de Capacitación  " + displayedTrainingCenterCode);

            string displayedCapacity = driver.FindElement(By.Id("dvCapacity")).Text;
            Assert.AreEqual(driver.FindElement(By.Id("dvCapacity")).Text, "23", $"La cantidad no es igual, deberia ser: 23");
            myCommons.Log.Information($"{DateTime.Now}: Validando el Assert en el campo de Capacidad  " + displayedCapacity);



            driver.Manage().Timeouts().ImplicitWait = TimeSpan.FromSeconds(10);
        }
    }
}