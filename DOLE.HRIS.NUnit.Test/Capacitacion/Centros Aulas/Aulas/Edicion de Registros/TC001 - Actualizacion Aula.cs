// Generated by Selenium IDE
using DOLE.HRIS.NUnit.Test;
using DOLE.HRIS.NUnit.Test.Utilities;
using NUnit.Framework;
using NUnit.Framework.Interfaces;
using OpenQA.Selenium;
using OpenQA.Selenium.Edge;
using OpenQA.Selenium.Support.UI;
using SeleniumExtras.WaitHelpers;
using Serilog;
using Serilog.Core;
using System;
using System.Collections.Generic;
using System.Configuration;
using System.Drawing.Text;
using System.Net;
using System.Net.Http;
using System.Runtime.InteropServices;
using System.Threading;
using System.Threading.Tasks;

namespace DOLE.HRIS.Application.Automation.Selenium
{
    [TestFixture]
    [Category("Aulas")]
    public class TC001ActualizacionAulaTest
    {
        private readonly string urlEntorno = Environment.GetEnvironmentVariable("UrlApplicationForTesting", EnvironmentVariableTarget.Process);
        private string urlTest = "";
        private readonly List<SeleniumEntity> seleniumEntities = new List<SeleniumEntity>();

        private readonly List<SeleniumEntity> seleniumEntitiesEdited = new List<SeleniumEntity>();


        private readonly string urlScreen = "/Training/Maintenances/Classrooms.aspx";

        private IWebDriver driver;
        public IDictionary<string, object> vars { get; private set; }
        private IJavaScriptExecutor js;
        Commons myCommons;
        WebDriverWait wait;
        int cantidad;


        //Actions actions;

        [SetUp]
        public void SetUp()
        {

            urlTest = !string.IsNullOrEmpty(urlEntorno) ? urlEntorno : ConfigurationManager.AppSettings.Get("UrlApplicationForTesting");
            driver = new EdgeDriver();
            myCommons = new Commons();
            myCommons.log();

            wait = new WebDriverWait(driver, TimeSpan.FromSeconds(60));

            driver.Manage().Window.Maximize();
            // Inicializa el ejecutor de JavaScript y el diccionario de variables
            js = (IJavaScriptExecutor)driver;
            vars = new Dictionary<string, object>();


            // Agrega entidades de Selenium
            seleniumEntities.Add(new SeleniumEntity("AE001", "AE001_Nueva"));
            seleniumEntities.Add(new SeleniumEntity("AE002", "AE002_Nueva"));
          


            // Agrega entidades de Selenium
            seleniumEntitiesEdited.Add(new SeleniumEntity("AE001", "AE001_Update001"));
            seleniumEntitiesEdited.Add(new SeleniumEntity("AE002", "AE002_Update002"));
        
           
        }

        [TearDown]
        protected void TearDown()
        {
            if (TestContext.CurrentContext.Result.Outcome.Status == TestStatus.Failed)
            {
                myCommons.TakeScreenshot(driver, TestContext.CurrentContext.Test.Name);
            }

            driver.Quit();
        }



        [Test]
        public async Task TC001ActualizacionAula()
        {
            Random rnd = new Random();

            await myCommons.SeleniumSetup(wait, driver, urlTest, urlScreen);

            for (int i = 0; i < 2; i++)
            {
                cantidad = rnd.Next(1, 10);


                wait.Until(ExpectedConditions.ElementIsVisible((By.Id("ctl00_cntBody_btnAdd"))));
                wait.Until(ExpectedConditions.ElementToBeClickable(By.Id("ctl00_cntBody_btnAdd"))).Click();

                myCommons.Log.Information($"{DateTime.Now}: Ingresando a la modal de Creación de Aulas.");

                //Los pasos para completar el formulario de creación de una aula
                myCommons.AgregarDatosAula(wait, driver, js, i, cantidad, seleniumEntities);
                myCommons.Log.Information($"{DateTime.Now}: Agregando Datos.");


                wait.Until(ExpectedConditions.ElementIsVisible((By.Id("ctl00_cntBody_txtClassroomCodeFilter"))));
                Utilities.CleanFields(js, "ctl00_cntBody_txtClassroomCodeFilter");
                driver.FindElement(By.Id("ctl00_cntBody_txtClassroomCodeFilter")).SendKeys(seleniumEntities[i].Code);
                myCommons.Log.Information($"{DateTime.Now}: Ingresando Código a buscar: ." + seleniumEntities[i].Code);


                driver.FindElement(By.Id("ctl00_cntBody_btnSearch")).Click();
                Thread.Sleep(500);

                DefaultWait<IWebDriver> fluentWait = new DefaultWait<IWebDriver>(driver)
                {
                    Timeout = TimeSpan.FromSeconds(10),
                    PollingInterval = TimeSpan.FromMilliseconds(500)
                };
                fluentWait.IgnoreExceptionTypes(typeof(StaleElementReferenceException));

                IWebElement element = fluentWait.Until(drv => drv.FindElement(By.Id("dvClassroomCode")));
                element.Click();

                myCommons.Log.Information($"{DateTime.Now}: Esperando el elemento en el grid dvClassroomCode  ");
                Thread.Sleep(500);



                var ButtonElement = driver.FindElement(By.Id("ctl00_cntBody_btnEdit"));
                IWebElement fieldElement = wait.Until(ExpectedConditions.ElementIsVisible(By.Id("ctl00_cntBody_btnEdit")));

                wait.Until(ExpectedConditions.ElementToBeClickable((ButtonElement))).Click();

                //wait.Until(ExpectedConditions.ElementIsVisible((By.Id("ctl00_cntBody_btnEdit"))));
                //driver.FindElement(By.Id("ctl00_cntBody_btnEdit")).Click();
                myCommons.Log.Information($"{DateTime.Now}: Ingresando en la modal de Edición");

                Thread.Sleep(500);
                myCommons.UpdateClassroom(wait, driver, js, i, cantidad, seleniumEntitiesEdited);


                Utilities.CleanFields(js, "ctl00_cntBody_txtClassroomCodeFilter");
                myCommons.BuscarAula(wait, driver, js, seleniumEntitiesEdited[i].Code);
                myCommons.Log.Information($"{DateTime.Now}: Buscar el Aula a modificar   " + seleniumEntitiesEdited[i].Code);


                // Los asserts validan que el test case, realmente inserto las aulas

                wait.Until(ExpectedConditions.ElementIsVisible(By.Id("dvClassroomCode")));

                string displayedCode = driver.FindElement(By.Id("dvClassroomCode")).Text;
                Assert.AreEqual(seleniumEntitiesEdited[i].Code, displayedCode, "La código del aula no coincide.");
                myCommons.Log.Information($"{DateTime.Now}: Validación del Assert para el código  " + displayedCode);

                string displayedDescription = driver.FindElement(By.Id("dvClassroomDescription")).Text;
                Assert.AreEqual(seleniumEntitiesEdited[i].Description, displayedDescription, "La descripción del aula no coincide.");
                myCommons.Log.Information($"{DateTime.Now}: Validación del Assert para el campo de descripción   " + displayedDescription);



                Assert.AreEqual(driver.FindElement(By.Id("dvCapacity")).Text, cantidad.ToString(), $"La cantidad no es igual, deberia ser:  {cantidad.ToString()}");
                myCommons.Log.Information($"{DateTime.Now}: Validación del Assert para la capacidad    " + cantidad.ToString());


                string displayedTrainingCenterCode = driver.FindElement(By.Id("dvTrainingCenterDescription")).Text;
                Assert.AreEqual("El Bosque - Interno", displayedTrainingCenterCode, "El código del centro de capacitación no coincide.");
                myCommons.Log.Information($"{DateTime.Now}: Validación del Assert para el campo de Centro de capacitación   " + displayedTrainingCenterCode);

                Utilities.CleanFields(js, "ctl00_cntBody_txtClassroomCodeFilter");


            }
        }

        private void UpdateClassroom(int i)
        {
            wait.Until(ExpectedConditions.ElementIsVisible((By.Id("ctl00_cntBody_ucClassroom_cboTrainingCenter"))));
            IWebElement fieldElement = driver.FindElement(By.Id("ctl00_cntBody_ucClassroom_cboTrainingCenter"));
            Utilities.SelectOptionByDropDownList(js, fieldElement, "El Bosque - Interno");
            myCommons.Log.Information($"{DateTime.Now}: Modificando el Centro de Capacitación  \"El Bosque - Interno ");


            wait.Until(ExpectedConditions.ElementIsVisible((By.Id("ctl00_cntBody_ucClassroom_txtClassroomDescription"))));
            wait.Until(ExpectedConditions.ElementToBeClickable(By.Id("ctl00_cntBody_ucClassroom_txtClassroomDescription"))).Click();


            Utilities.CleanFields(js, "ctl00_cntBody_ucClassroom_txtClassroomDescription");
            wait.Until(ExpectedConditions.ElementToBeClickable(By.Id("ctl00_cntBody_ucClassroom_txtClassroomDescription"))).Click();

            driver.FindElement(By.Id("ctl00_cntBody_ucClassroom_txtClassroomDescription")).SendKeys(seleniumEntitiesEdited[i].Description);


            myCommons.Log.Information($"{DateTime.Now}: Modificando la Descripción   " + seleniumEntitiesEdited[i].Description);

            driver.FindElement(By.Id("ctl00_cntBody_ucClassroom_txtCapacity")).Click();
            Utilities.CleanFields(js, "ctl00_cntBody_ucClassroom_txtCapacity");

            driver.FindElement(By.Id("ctl00_cntBody_ucClassroom_txtCapacity")).Click();
            driver.FindElement(By.Id("ctl00_cntBody_ucClassroom_txtCapacity")).SendKeys(cantidad.ToString());
            myCommons.Log.Information($"{DateTime.Now}: Modificando la Capacidad   " + cantidad.ToString());


            driver.FindElement(By.Id("ctl00_cntBody_ucClassroom_txtComments")).Click();
            Utilities.CleanFields(js, "ctl00_cntBody_ucClassroom_txtComments");

            driver.FindElement(By.Id("ctl00_cntBody_ucClassroom_txtComments")).Click();
            driver.FindElement(By.Id("ctl00_cntBody_ucClassroom_txtComments")).SendKeys("Selenium");
            myCommons.Log.Information($"{DateTime.Now}: Modificando el campo de Comentario Selenium ");


            driver.FindElement(By.Id("ctl00_cntBody_btnAccept")).Click();
            myCommons.Log.Information($"{DateTime.Now}: Click en el botón de Aceptar para aplicar la modificación ");

            Thread.Sleep(1500);



            wait.Until(drv =>
            {
                try
                {
                    var elementMessage = drv.FindElement(By.CssSelector("div.alert.alert-autocloseable-msg.alert-success"));
                    return elementMessage.Displayed && elementMessage.Text.Contains("La operación fue realizada exitosamente");
                }
                catch (NoSuchElementException)
                {
                    return false;
                }
            });

            wait.Until(ExpectedConditions.InvisibilityOfElementLocated(
                By.CssSelector("div.alert.alert-autocloseable-msg.alert-success")));
        }
    }
}